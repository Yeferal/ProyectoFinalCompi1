
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 21 16:56:44 CST 2020
//----------------------------------------------------

package analizadores.inz;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import objetos.Lienzo;
import objetos.ErrorG;
import tablas.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 21 16:56:44 CST 2020
  */
public class AnalizadorSintacticoLnz extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoLnz() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoLnz(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoLnz(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\003\007" +
    "\000\002\017\002\000\002\020\002\000\002\004\012\000" +
    "\002\005\004\000\002\005\002\000\002\006\011\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\016\004\000\002\016\004\000\002\016\002" +
    "\000\002\010\003\000\002\010\003\000\002\011\007\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\013\005\000\002\014\007\000\002\015" +
    "\005\000\002\015\005\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\006\003\005\007\004\001\002\000\004\011" +
    "\127\001\002\000\014\012\014\013\011\015\012\017\016" +
    "\020\017\001\002\000\004\002\007\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002\000\004\004\ufffb" +
    "\001\002\000\004\004\066\001\002\000\004\002\ufffd\001" +
    "\002\000\004\004\044\001\002\000\006\002\ufffe\005\036" +
    "\001\002\000\004\004\026\001\002\000\004\004\020\001" +
    "\002\000\004\006\021\001\002\000\006\021\023\022\022" +
    "\001\002\000\004\006\uffed\001\002\000\004\006\uffee\001" +
    "\002\000\004\006\025\001\002\000\010\002\ufff4\005\ufff4" +
    "\010\ufff4\001\002\000\004\006\027\001\002\000\010\006" +
    "\uffef\013\031\014\030\001\002\000\010\006\uffef\013\031" +
    "\014\030\001\002\000\010\006\uffef\013\031\014\030\001" +
    "\002\000\004\006\033\001\002\000\010\002\ufff5\005\ufff5" +
    "\010\ufff5\001\002\000\004\006\ufff1\001\002\000\004\006" +
    "\ufff0\001\002\000\012\012\014\015\012\017\016\020\017" +
    "\001\002\000\004\005\040\001\002\000\012\012\014\015" +
    "\012\017\016\020\017\001\002\000\004\005\042\001\002" +
    "\000\012\012\014\015\012\017\016\020\017\001\002\000" +
    "\006\002\ufff6\010\ufff6\001\002\000\004\007\045\001\002" +
    "\000\010\027\047\030\050\031\046\001\002\000\004\004" +
    "\064\001\002\000\004\004\062\001\002\000\004\004\060" +
    "\001\002\000\004\010\057\001\002\000\004\005\053\001" +
    "\002\000\010\027\047\030\050\031\046\001\002\000\004" +
    "\005\055\001\002\000\010\027\047\030\050\031\046\001" +
    "\002\000\004\010\uffe6\001\002\000\010\002\ufff2\005\ufff2" +
    "\010\ufff2\001\002\000\004\014\061\001\002\000\006\005" +
    "\uffe4\010\uffe4\001\002\000\004\014\063\001\002\000\006" +
    "\005\uffe5\010\uffe5\001\002\000\004\014\065\001\002\000" +
    "\006\005\uffe3\010\uffe3\001\002\000\004\007\067\001\002" +
    "\000\012\023\072\024\073\025\074\026\075\001\002\000" +
    "\004\010\uffeb\001\002\000\004\010\113\001\002\000\004" +
    "\004\111\001\002\000\004\004\107\001\002\000\004\004" +
    "\105\001\002\000\004\004\103\001\002\000\004\005\077" +
    "\001\002\000\010\024\073\025\074\026\075\001\002\000" +
    "\004\005\101\001\002\000\010\024\073\025\074\026\075" +
    "\001\002\000\004\010\uffec\001\002\000\004\014\104\001" +
    "\002\000\006\005\uffe8\010\uffe8\001\002\000\004\014\106" +
    "\001\002\000\006\005\uffe9\010\uffe9\001\002\000\004\014" +
    "\110\001\002\000\006\005\uffea\010\uffea\001\002\000\004" +
    "\016\112\001\002\000\004\010\uffe7\001\002\000\010\002" +
    "\ufff3\005\ufff3\010\ufff3\001\002\000\004\004\115\001\002" +
    "\000\004\007\116\001\002\000\012\012\014\015\012\017" +
    "\016\020\017\001\002\000\004\010\121\001\002\000\004" +
    "\005\036\001\002\000\010\002\ufffa\005\ufffa\010\ufffa\001" +
    "\002\000\010\002\ufff7\005\123\010\ufff7\001\002\000\004" +
    "\013\011\001\002\000\006\002\ufff9\010\ufff9\001\002\000" +
    "\006\002\ufff8\010\ufff8\001\002\000\004\010\134\001\002" +
    "\000\004\004\130\001\002\000\004\007\131\001\002\000" +
    "\004\013\011\001\002\000\004\010\133\001\002\000\004" +
    "\010\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\002\005\001\001\000\004\003\125\001" +
    "\001\000\010\004\007\006\012\007\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\031\001\001\000\004" +
    "\016\034\001\001\000\004\016\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\036\001\001\000\002\001\001\000\004\007" +
    "\040\001\001\000\002\001\001\000\004\007\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\050\015" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\053\001\001\000\002\001\001\000\004\015\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\070\012\075\013\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\077" +
    "\001\001\000\002\001\001\000\004\012\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\116\007" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\121\001\001\000\004\005\123\001\001\000\004\004" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoLnz$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoLnz$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoLnz$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    TablaSimbolos tablaSimbolos;
    public ArrayList<ErrorG> listaErrores = new  ArrayList<>();
    
    public void setTabla(TablaSimbolos tablaSimbolos){
        this.tablaSimbolos = tablaSimbolos; 
    }

    public TablaSimbolos getTabla(){
        return tablaSimbolos; 
    }





    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            if(s!=null){
                ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                listaErrores.add(e);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoLnz$actions {


    TablaSimbolos tablaSimbolos = new TablaSimbolos();
    Lienzo lienzo;
    boolean correcto;

  private final AnalizadorSintacticoLnz parser;

  /** Constructor */
  CUP$AnalizadorSintacticoLnz$actions(AnalizadorSintacticoLnz parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoLnz$do_action(
    int                        CUP$AnalizadorSintacticoLnz$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoLnz$parser,
    java.util.Stack            CUP$AnalizadorSintacticoLnz$stack,
    int                        CUP$AnalizadorSintacticoLnz$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoLnz$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoLnz$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ATRIB_TAMANIO ::= DIMENSION_Y DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		 lienzo.setDimensionY(Integer.parseInt((String) y)); RESULT = 3;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIB_TAMANIO",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ATRIB_TAMANIO ::= DIMENSION_X DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		 lienzo.setDimensionX(Integer.parseInt((String) x)); RESULT = 2;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIB_TAMANIO",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATRIB_TAMANIO ::= CUADRO DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		 lienzo.setCuadro(Integer.parseInt((String) c)); RESULT = 1;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIB_TAMANIO",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ESTRUCTURA_TAMANIO ::= ATRIB_TAMANIO COMA ATRIB_TAMANIO COMA ATRIB_TAMANIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		
                        int a1 = (int) a;
                        int a2 = (int) b;
                        int a3 = (int) c;
                        if(a1==a2 || a1==a3 || a2==a3){
                            correcto = false;
                            //error dato duplicado
                            System.out.println("se duplico algun atributo");
                        }
                    
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_TAMANIO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ATRIB_HEX ::= HEX DOS_PUNTOS CODIGO_HEX 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		 lienzo.setFondoHEX((String) h); 
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIB_HEX",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ATRIB_RGB ::= GREEN DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		 lienzo.setGreen(Integer.parseInt((String) g)); RESULT = 3;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIB_RGB",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ATRIB_RGB ::= BLUE DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		 lienzo.setBlue(Integer.parseInt((String) b)); RESULT = 2;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIB_RGB",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATRIB_RGB ::= RED DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		 lienzo.setRed(Integer.parseInt((String) r)); RESULT = 1;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIB_RGB",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ESTRUCTURA_FONDO ::= ATRIB_HEX 
            {
              Object RESULT =null;
		 lienzo.setTipoFondo(2); 
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FONDO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTRUCTURA_FONDO ::= ATRIB_RGB COMA ATRIB_RGB COMA ATRIB_RGB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		 lienzo.setTipoFondo(1);
                        int a1 = (int) a;
                        int a2 = (int) b;
                        int a3 = (int) c;
                        if(a1==a2 || a1==a3 || a2==a3){
                            correcto = false;
                            ErrorG e = null;
                            //error dato duplicado
                            System.out.println("se duplico algun atributo");
                            if(a1==a2){
                                e = new ErrorG(bright+1,bleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(bright+1)+",   Columna: "+(bleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(bright+1)+",   Columna: "+(bleft+1));
                            }
                            if(a1==a3){
                                e = new ErrorG(cright+1,cleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                            }

                            if(a2==a3){
                                e = new ErrorG(cright+1,cleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                            }
                            
                            parser.listaErrores.add(e);
                        }
                    
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FONDO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_IMAGEN ::= GIF 
            {
              Object RESULT =null;
		 RESULT = "gif";
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("TIPO_IMAGEN",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_IMAGEN ::= PNG 
            {
              Object RESULT =null;
		 RESULT = "png";
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("TIPO_IMAGEN",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IDENTIFICADORES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IDENTIFICADORES ::= NUMERO IDENTIFICADORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		  String t = " ";
                        if(b!=null){
                            t = (String)a+" "+(String)b;
                        }else{
                            t = (String)a;
                        } 
                        System.out.println("entro a intificadores id: "+(String)t); 
                        RESULT = (String)t; 
                        
                    
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IDENTIFICADORES ::= IDENTIFICADOR IDENTIFICADORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		  String t = " ";
                        if(b!=null){
                            t = (String)a+" "+(String)b;
                        }else{
                            t = (String)a;
                        } 
                        System.out.println("entro a intificadores id: "+(String)t); 
                        RESULT = (String)t; 
                        
                    
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ATRIBUTOS ::= TAMANIO DOS_PUNTOS LLAVES_A ESTRUCTURA_TAMANIO LLAVES_C 
            {
              Object RESULT =null;
		 RESULT = 4;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ATRIBUTOS ::= FONDO DOS_PUNTOS LLAVES_A ESTRUCTURA_FONDO LLAVES_C 
            {
              Object RESULT =null;
		 RESULT = 3;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ATRIBUTOS ::= TIPO DOS_PUNTOS COMILLAS TIPO_IMAGEN COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).value;
		 lienzo.setTipo((String) a); RESULT = 2;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ATRIBUTOS ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADORES COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).value;
		 lienzo.setNombre((String) a); RESULT = 1;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETROS ::= ATRIBUTOS COMA ATRIBUTOS COMA ATRIBUTOS COMA ATRIBUTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-5)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-3)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
		
                        int a1 = (int) a;
                        int a2 = (int) b;
                        int a3 = (int) c;
                        int a4 = (int) d;
                        if(a1==a2 || a1==a3 || a1==a4 || a2==a3 || a2==a4 || a3==a4){
                            correcto = false;
                            ErrorG e = null;
                            //error dato duplicado
                            System.out.println("se duplico algun atributo");
                            if(a1==a2){
                                e = new ErrorG(bright+1,bleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(bright+1)+",   Columna: "+(bleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(bright+1)+",   Columna: "+(bleft+1));
                            }
                            if(a1==a3){
                                e = new ErrorG(cright+1,cleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                            }
                            if(a1==a4){
                                e = new ErrorG(dright+1,dleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(dright+1)+",   Columna: "+(dleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(dright+1)+",   Columna: "+(dleft+1));
                            }
                            if(a2==a3){
                                e = new ErrorG(cright+1,cleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                            }
                            if(a2==a4){
                                e = new ErrorG(dright+1,dleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(dright+1)+",   Columna: "+(dleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(dright+1)+",   Columna: "+(dleft+1));
                            }
                            if(a3==a4){
                                e = new ErrorG(dright+1,dleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(dright+1)+",   Columna: "+(dleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(bright+1)+",   Columna: "+(bleft+1));
                            }
                            
                            parser.listaErrores.add(e);
                        }
                    
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("PARAMETROS",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S0 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("S0",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S0 ::= COMA ESTRUCTURA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("S0",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA_PARAMETROS ::= IDENTIFICADOR NT$0 DOS_PUNTOS LLAVES_A PARAMETROS LLAVES_C NT$1 S0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-7)).value;

              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-5)).value;

                    if(tablaSimbolos.buscarSimbolo((String) a)){
                        ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" ya existe");
                        parser.listaErrores.add(e);
                        System.out.println("Semantico: El simbolo "+(String) a+" ya existe");
                    }else{
                        if(correcto){
                            SimboloObject simbolo = new SimboloObject((String) a, "Lienzo", lienzo);
                            tablaSimbolos.agregarSimbolo(simbolo);
                        }
                    }
                    
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.peek()).value;
lienzo = new Lienzo(); correcto = true; 
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURA_LIENZOS ::= LIENZOS DOS_PUNTOS LLAVES_A ESTRUCTURA_PARAMETROS LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_LIENZOS",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error PARAMETROS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error ATRIBUTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error ESTRUCTURA_PARAMETROS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LLAVES_A ESTRUCTURA_LIENZOS LLAVES_C 
            {
              Object RESULT =null;
		 parser.setTabla(tablaSimbolos); 
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLnz$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoLnz$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.elementAt(CUP$AnalizadorSintacticoLnz$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLnz$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoLnz$parser.done_parsing();
          return CUP$AnalizadorSintacticoLnz$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

