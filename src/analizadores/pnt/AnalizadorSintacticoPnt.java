
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 24 13:03:55 CST 2020
//----------------------------------------------------

package analizadores.pnt;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import objetos.*;
import tablas.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 24 13:03:55 CST 2020
  */
public class AnalizadorSintacticoPnt extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoPnt() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPnt(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPnt(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\335\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\003\007\000\002\063\002\000" +
    "\002\064\002\000\002\004\015\000\002\005\003\000\002" +
    "\005\004\000\002\005\002\000\002\006\010\000\002\006" +
    "\006\000\002\055\004\000\002\055\002\000\002\007\004" +
    "\000\002\065\002\000\002\007\005\000\002\007\002\000" +
    "\002\066\002\000\002\010\010\000\002\067\002\000\002" +
    "\010\010\000\002\070\002\000\002\010\010\000\002\071" +
    "\002\000\002\011\006\000\002\072\002\000\002\011\004" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\044\003\000\002\044\003\000\002\073\002\000\002\074" +
    "\002\000\002\013\011\000\002\075\002\000\002\013\006" +
    "\000\002\013\002\000\002\076\002\000\002\014\006\000" +
    "\002\077\002\000\002\014\004\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\002\000\002\100\002" +
    "\000\002\101\002\000\002\017\011\000\002\102\002\000" +
    "\002\017\006\000\002\017\002\000\002\103\002\000\002" +
    "\020\006\000\002\104\002\000\002\020\004\000\002\021" +
    "\003\000\002\021\003\000\002\105\002\000\002\106\002" +
    "\000\002\022\011\000\002\107\002\000\002\022\006\000" +
    "\002\022\002\000\002\056\004\000\002\056\002\000\002" +
    "\057\004\000\002\057\002\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\110\002\000\002\060\007\000\002\060\003" +
    "\000\002\060\003\000\002\061\005\000\002\061\005\000" +
    "\002\061\005\000\002\061\005\000\002\061\003\000\002" +
    "\061\005\000\002\061\003\000\002\111\002\000\002\026" +
    "\010\000\002\112\002\000\002\026\006\000\002\113\002" +
    "\000\002\026\006\000\002\026\002\000\002\045\003\000" +
    "\002\045\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\002\000\002\114\002\000\002\024\007\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\003\000\002\025\005\000\002" +
    "\025\003\000\002\025\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\062\003\000\002\062\003" +
    "\000\002\115\002\000\002\116\002\000\002\117\002\000" +
    "\002\120\002\000\002\031\021\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\032\003\000\002\033\005" +
    "\000\002\033\003\000\002\034\012\000\002\035\003\000" +
    "\002\037\003\000\002\040\013\000\002\041\007\000\002" +
    "\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\006\003\005\016\004\001\002\000\004\004" +
    "\u014e\001\002\000\022\002\ufffb\013\040\031\025\032\u0104" +
    "\033\u0108\034\u0106\042\014\043\041\001\002\000\006\042" +
    "\ufff0\056\012\001\002\000\004\002\010\001\002\000\004" +
    "\002\001\001\002\000\004\042\014\001\002\000\036\002" +
    "\ufff0\005\ufff0\012\ufff0\013\ufff0\023\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\037\ufff0\042\ufff0\043\ufff0\056" +
    "\012\001\002\000\034\002\ufff1\005\ufff1\012\ufff1\013\ufff1" +
    "\023\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037" +
    "\ufff1\042\ufff1\043\ufff1\001\002\000\004\026\016\001\002" +
    "\000\004\002\000\001\002\000\004\013\017\001\002\000" +
    "\004\027\ufff9\001\002\000\004\027\021\001\002\000\004" +
    "\004\ufff8\001\002\000\004\004\023\001\002\000\022\005" +
    "\ufff0\013\ufff0\023\ufff0\031\ufff0\035\ufff0\037\ufff0\043\ufff0" +
    "\056\012\001\002\000\020\005\uff49\013\040\023\033\031" +
    "\025\035\032\037\026\043\041\001\002\000\004\026\uff39" +
    "\001\002\000\004\026\375\001\002\000\004\005\370\001" +
    "\002\000\024\005\ufff0\012\ufff0\013\ufff0\023\ufff0\031\ufff0" +
    "\035\ufff0\037\ufff0\043\ufff0\056\012\001\002\000\024\005" +
    "\ufff0\012\ufff0\013\ufff0\023\ufff0\031\ufff0\035\ufff0\037\ufff0" +
    "\043\ufff0\056\012\001\002\000\004\026\303\001\002\000" +
    "\006\022\155\023\156\001\002\000\024\005\ufff0\012\ufff0" +
    "\013\ufff0\023\ufff0\031\ufff0\035\ufff0\037\ufff0\043\ufff0\056" +
    "\012\001\002\000\024\005\ufff0\012\ufff0\013\ufff0\023\ufff0" +
    "\031\ufff0\035\ufff0\037\ufff0\043\ufff0\056\012\001\002\000" +
    "\004\026\101\001\002\000\022\005\uff49\012\uff49\013\040" +
    "\023\033\031\025\035\032\037\026\043\041\001\002\000" +
    "\004\017\uff48\001\002\000\004\026\uff3a\001\002\000\004" +
    "\017\043\001\002\000\014\010\051\013\047\044\044\047" +
    "\046\050\050\001\002\000\030\014\uff41\020\uff41\021\uff41" +
    "\022\uff41\023\uff41\024\uff41\025\uff41\051\uff41\052\uff41\053" +
    "\uff41\054\uff41\001\002\000\030\014\uff3e\020\uff3e\021\uff3e" +
    "\022\uff3e\023\uff3e\024\uff3e\025\uff3e\051\uff3e\052\uff3e\053" +
    "\uff3e\054\uff3e\001\002\000\040\007\uffbe\014\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\027\uffbe\040" +
    "\uffbe\041\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\001\002" +
    "\000\030\014\uff3f\020\uff3f\021\uff3f\022\uff3f\023\uff3f\024" +
    "\uff3f\025\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f\001\002" +
    "\000\040\007\uffbd\014\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\027\uffbd\040\uffbd\041\uffbd\051\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\001\002\000\010\010\uffc9\013" +
    "\075\044\074\001\002\000\030\014\060\020\061\021\054" +
    "\022\053\023\063\024\062\025\055\051\057\052\066\053" +
    "\056\054\065\001\002\000\014\010\051\013\047\044\044" +
    "\047\046\050\050\001\002\000\014\010\051\013\047\044" +
    "\044\047\046\050\050\001\002\000\014\010\uff66\013\uff66" +
    "\044\uff66\047\uff66\050\uff66\001\002\000\014\010\uff68\013" +
    "\uff68\044\uff68\047\uff68\050\uff68\001\002\000\014\010\uff65" +
    "\013\uff65\044\uff65\047\uff65\050\uff65\001\002\000\026\002" +
    "\uff47\005\uff47\012\uff47\013\uff47\023\uff47\031\uff47\035\uff47" +
    "\037\uff47\043\uff47\056\uff47\001\002\000\014\010\051\013" +
    "\047\044\044\047\046\050\050\001\002\000\014\010\uff67" +
    "\013\uff67\044\uff67\047\uff67\050\uff67\001\002\000\014\010" +
    "\051\013\047\044\044\047\046\050\050\001\002\000\014" +
    "\010\051\013\047\044\044\047\046\050\050\001\002\000" +
    "\014\010\uff63\013\uff63\044\uff63\047\uff63\050\uff63\001\002" +
    "\000\014\010\uff64\013\uff64\044\uff64\047\uff64\050\uff64\001" +
    "\002\000\030\014\uff42\020\061\021\054\022\053\023\063" +
    "\024\062\025\055\051\057\052\066\053\056\054\065\001" +
    "\002\000\030\014\uff43\020\uff43\021\uff43\022\uff43\023\uff43" +
    "\024\uff43\025\uff43\051\uff43\052\uff43\053\uff43\054\uff43\001" +
    "\002\000\030\014\uff46\020\uff46\021\uff46\022\053\023\063" +
    "\024\uff46\025\uff46\051\uff46\052\uff46\053\uff46\054\uff46\001" +
    "\002\000\030\014\uff45\020\uff45\021\uff45\022\053\023\063" +
    "\024\uff45\025\uff45\051\uff45\052\uff45\053\uff45\054\uff45\001" +
    "\002\000\030\014\uff44\020\uff44\021\uff44\022\uff44\023\uff44" +
    "\024\uff44\025\uff44\051\uff44\052\uff44\053\uff44\054\uff44\001" +
    "\002\000\004\010\uffca\001\002\000\004\010\uffcb\001\002" +
    "\000\004\010\077\001\002\000\030\014\uff40\020\uff40\021" +
    "\uff40\022\uff40\023\uff40\024\uff40\025\uff40\051\uff40\052\uff40" +
    "\053\uff40\054\uff40\001\002\000\006\005\uff4a\012\uff4a\001" +
    "\002\000\010\010\uff38\013\uff38\044\uff38\001\002\000\010" +
    "\010\106\013\104\044\103\001\002\000\014\007\uff2e\020" +
    "\uff2e\021\uff2e\022\uff2e\023\uff2e\001\002\000\014\007\uff2d" +
    "\020\uff2d\021\uff2d\022\uff2d\023\uff2d\001\002\000\014\007" +
    "\uff37\020\112\021\114\022\111\023\113\001\002\000\010" +
    "\010\uffc9\013\075\044\074\001\002\000\004\010\110\001" +
    "\002\000\014\007\uff2f\020\uff2f\021\uff2f\022\uff2f\023\uff2f" +
    "\001\002\000\010\010\106\013\104\044\103\001\002\000" +
    "\010\010\106\013\104\044\103\001\002\000\010\010\106" +
    "\013\104\044\103\001\002\000\010\010\106\013\104\044" +
    "\103\001\002\000\004\007\116\001\002\000\010\010\uff36" +
    "\013\uff36\044\uff36\001\002\000\010\010\106\013\104\044" +
    "\103\001\002\000\014\007\uff35\020\112\021\114\022\111" +
    "\023\113\001\002\000\004\007\122\001\002\000\006\013" +
    "\125\044\123\001\002\000\022\007\uffdd\014\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\027\uffdd\055\uffdd\001\002\000" +
    "\004\007\141\001\002\000\022\007\uffdc\014\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\027\uffdc\055\uffdc\001\002\000" +
    "\020\007\uff2b\020\130\021\132\022\127\023\131\027\uff2b" +
    "\055\133\001\002\000\006\013\125\044\123\001\002\000" +
    "\006\013\125\044\123\001\002\000\006\013\125\044\123" +
    "\001\002\000\006\013\125\044\123\001\002\000\006\013" +
    "\125\044\123\001\002\000\016\007\uff2c\020\130\021\132" +
    "\022\127\023\131\027\uff2c\001\002\000\022\007\uffe0\014" +
    "\uffe0\020\uffe0\021\uffe0\022\127\023\131\027\uffe0\055\uffe0" +
    "\001\002\000\022\007\uffde\014\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\027\uffde\055\uffde\001\002\000\022\007\uffe1" +
    "\014\uffe1\020\uffe1\021\uffe1\022\127\023\131\027\uffe1\055" +
    "\uffe1\001\002\000\022\007\uffdf\014\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\027\uffdf\055\uffdf\001\002\000\006\013" +
    "\125\044\123\001\002\000\004\027\143\001\002\000\004" +
    "\014\144\001\002\000\026\002\uff34\005\uff34\012\uff34\013" +
    "\uff34\023\uff34\031\uff34\035\uff34\037\uff34\043\uff34\056\uff34" +
    "\001\002\000\014\007\uff32\020\uff32\021\uff32\022\111\023" +
    "\113\001\002\000\014\007\uff30\020\uff30\021\uff30\022\uff30" +
    "\023\uff30\001\002\000\014\007\uff33\020\uff33\021\uff33\022" +
    "\111\023\113\001\002\000\014\007\uff31\020\uff31\021\uff31" +
    "\022\uff31\023\uff31\001\002\000\022\005\uff49\012\uff49\013" +
    "\040\023\033\031\025\035\032\037\026\043\041\001\002" +
    "\000\006\005\uff4e\012\uff4e\001\002\000\022\005\uff49\012" +
    "\uff49\013\040\023\033\031\025\035\032\037\026\043\041" +
    "\001\002\000\006\005\uff4d\012\uff4d\001\002\000\116\004" +
    "\240\005\236\006\235\007\256\010\253\011\233\012\231" +
    "\013\243\014\251\016\232\017\244\020\276\021\257\022" +
    "\uffb3\024\271\025\260\026\266\027\264\030\262\032\237" +
    "\033\270\034\252\035\247\036\261\037\265\040\242\041" +
    "\246\042\241\043\255\044\230\047\254\050\273\051\267" +
    "\052\272\053\250\054\234\055\245\056\274\001\002\000" +
    "\116\004\167\005\165\006\164\007\210\010\205\011\162" +
    "\012\160\013\174\014\203\016\161\017\175\020\225\021" +
    "\211\022\170\024\222\025\212\026\217\027\215\030\214" +
    "\032\166\033\221\034\204\035\201\036\213\037\216\040" +
    "\173\041\177\042\172\043\207\044\157\047\206\050\224" +
    "\051\220\052\223\053\202\054\163\055\176\056\uffb5\001" +
    "\002\000\116\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95" +
    "\011\uff95\012\uff95\013\uff95\014\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\024\uff95\025\uff95\026\uff95\027\uff95" +
    "\030\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056" +
    "\uff95\001\002\000\116\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\001\002\000\116\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\056\uffa9\001\002\000\116\004\uffad\005\uffad" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\001\002\000\116\004\uff8f" +
    "\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\014\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\032\uff8f\033" +
    "\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\042\uff8f\043\uff8f\044\uff8f\047\uff8f\050\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\001\002\000\116" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002" +
    "\000\116\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\001\002\000\116\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\001\002\000\116\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\001\002\000\116\004\uffa5\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\001\002\000\116\004\167\005" +
    "\165\006\164\007\210\010\205\011\162\012\160\013\174" +
    "\014\203\016\161\017\175\020\225\021\211\022\170\024" +
    "\222\025\212\026\217\027\215\030\214\032\166\033\221" +
    "\034\204\035\201\036\213\037\216\040\173\041\177\042" +
    "\172\043\207\044\157\047\206\050\224\051\220\052\223" +
    "\053\202\054\163\055\176\056\uffb5\001\002\000\116\004" +
    "\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97" +
    "\013\uff97\014\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\032\uff97" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\001\002\000" +
    "\116\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\014\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\022\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\001" +
    "\002\000\116\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab" +
    "\011\uffab\012\uffab\013\uffab\014\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\001\002\000\116\004\uffa8\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\001\002\000\116\004\uff8e\005\uff8e\006\uff8e" +
    "\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\024\uff8e\025\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\032\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054" +
    "\uff8e\055\uff8e\056\uff8e\001\002\000\116\004\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\024\uff98" +
    "\025\uff98\026\uff98\027\uff98\030\uff98\032\uff98\033\uff98\034" +
    "\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98" +
    "\043\uff98\044\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053" +
    "\uff98\054\uff98\055\uff98\056\uff98\001\002\000\004\056\226" +
    "\001\002\000\116\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\001\002\000\116\004\uff90\005\uff90\006\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90\016\uff90" +
    "\017\uff90\020\uff90\021\uff90\022\uff90\024\uff90\025\uff90\026" +
    "\uff90\027\uff90\030\uff90\032\uff90\033\uff90\034\uff90\035\uff90" +
    "\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044" +
    "\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90" +
    "\055\uff90\056\uff90\001\002\000\116\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\001\002\000\116\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\056\uff9d\001\002\000\116\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\001\002\000" +
    "\116\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94" +
    "\012\uff94\013\uff94\014\uff94\016\uff94\017\uff94\020\uff94\021" +
    "\uff94\022\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\047\uff94\050\uff94" +
    "\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\001" +
    "\002\000\116\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\013\uff96\014\uff96\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\047\uff96" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\001\002\000\116\004\uffaf\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\001\002\000\116\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\001\002\000\116\004\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\024\uffa3" +
    "\025\uffa3\026\uffa3\027\uffa3\030\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\001\002\000\116\004\uff9b" +
    "\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\032\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\047\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\001\002\000\116" +
    "\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\001\002" +
    "\000\116\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1" +
    "\001\002\000\116\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a" +
    "\056\uff9a\001\002\000\116\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\001\002\000\116\004\uff92\005\uff92\006" +
    "\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92" +
    "\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\024\uff92\025" +
    "\uff92\026\uff92\027\uff92\030\uff92\032\uff92\033\uff92\034\uff92" +
    "\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\044\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92" +
    "\054\uff92\055\uff92\056\uff92\001\002\000\116\004\uff9e\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e" +
    "\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\056\uff9e\001\002\000\116\004" +
    "\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\001\002\000" +
    "\116\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\013\uff91\014\uff91\016\uff91\017\uff91\020\uff91\021" +
    "\uff91\022\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91" +
    "\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\041\uff91\042\uff91\043\uff91\044\uff91\047\uff91\050\uff91" +
    "\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\001" +
    "\002\000\116\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\011\uff93\012\uff93\013\uff93\014\uff93\016\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\024\uff93\025\uff93\026\uff93\027\uff93" +
    "\030\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037" +
    "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\047\uff93" +
    "\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056" +
    "\uff93\001\002\000\116\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\001\002\000\030\005\ufff2\012\ufff2\013\ufff2" +
    "\023\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037" +
    "\ufff2\043\ufff2\001\002\000\004\056\uffb6\001\002\000\116" +
    "\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012" +
    "\uff71\013\uff71\014\uff71\016\uff71\017\uff71\020\uff71\021\uff71" +
    "\022\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\032" +
    "\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71" +
    "\041\uff71\042\uff71\043\uff71\044\uff71\047\uff71\050\uff71\051" +
    "\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71\001\002" +
    "\000\116\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011" +
    "\uff87\012\uff87\013\uff87\014\uff87\016\uff87\017\uff87\020\uff87" +
    "\021\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\047\uff87\050" +
    "\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\056\uff87" +
    "\001\002\000\116\004\uff84\005\uff84\006\uff84\007\uff84\010" +
    "\uff84\011\uff84\012\uff84\013\uff84\014\uff84\016\uff84\017\uff84" +
    "\020\uff84\021\uff84\022\uff84\024\uff84\025\uff84\026\uff84\027" +
    "\uff84\030\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\047" +
    "\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84" +
    "\056\uff84\001\002\000\116\004\uff88\005\uff88\006\uff88\007" +
    "\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\016\uff88" +
    "\017\uff88\020\uff88\021\uff88\022\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\030\uff88\032\uff88\033\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044" +
    "\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88" +
    "\055\uff88\056\uff88\001\002\000\116\004\uff6b\005\uff6b\006" +
    "\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b" +
    "\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\024\uff6b\025" +
    "\uff6b\026\uff6b\027\uff6b\030\uff6b\032\uff6b\033\uff6b\034\uff6b" +
    "\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043" +
    "\uff6b\044\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b" +
    "\054\uff6b\055\uff6b\056\uff6b\001\002\000\116\004\uff8b\005" +
    "\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\032\uff8b\033\uff8b" +
    "\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042" +
    "\uff8b\043\uff8b\044\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b" +
    "\053\uff8b\054\uff8b\055\uff8b\056\uff8b\001\002\000\116\004" +
    "\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\032\uff8c" +
    "\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\001\002\000" +
    "\116\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\016\uff7b\017\uff7b\020\uff7b\021" +
    "\uff7b\022\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b" +
    "\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\047\uff7b\050\uff7b" +
    "\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\001" +
    "\002\000\116\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d" +
    "\011\uff8d\012\uff8d\013\uff8d\014\uff8d\016\uff8d\017\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d" +
    "\030\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\047\uff8d" +
    "\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056" +
    "\uff8d\001\002\000\116\004\uff73\005\uff73\006\uff73\007\uff73" +
    "\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\016\uff73\017" +
    "\uff73\020\uff73\021\uff73\022\uff73\024\uff73\025\uff73\026\uff73" +
    "\027\uff73\030\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036" +
    "\uff73\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73" +
    "\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055" +
    "\uff73\056\uff73\001\002\000\116\004\uff75\005\uff75\006\uff75" +
    "\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75\016" +
    "\uff75\017\uff75\020\uff75\021\uff75\022\uff75\024\uff75\025\uff75" +
    "\026\uff75\027\uff75\030\uff75\032\uff75\033\uff75\034\uff75\035" +
    "\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75" +
    "\044\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054" +
    "\uff75\055\uff75\056\uff75\001\002\000\116\004\uff86\005\uff86" +
    "\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014" +
    "\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\024\uff86" +
    "\025\uff86\026\uff86\027\uff86\030\uff86\032\uff86\033\uff86\034" +
    "\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86" +
    "\043\uff86\044\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053" +
    "\uff86\054\uff86\055\uff86\056\uff86\001\002\000\116\004\uff83" +
    "\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013" +
    "\uff83\014\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83" +
    "\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\032\uff83\033" +
    "\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83" +
    "\042\uff83\043\uff83\044\uff83\047\uff83\050\uff83\051\uff83\052" +
    "\uff83\053\uff83\054\uff83\055\uff83\056\uff83\001\002\000\116" +
    "\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012" +
    "\uff6a\013\uff6a\014\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a" +
    "\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\032" +
    "\uff6a\033\uff6a\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a" +
    "\041\uff6a\042\uff6a\043\uff6a\044\uff6a\047\uff6a\050\uff6a\051" +
    "\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a\001\002" +
    "\000\116\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011" +
    "\uff74\012\uff74\013\uff74\014\uff74\016\uff74\017\uff74\020\uff74" +
    "\021\uff74\022\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030" +
    "\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74" +
    "\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\047\uff74\050" +
    "\uff74\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74" +
    "\001\002\000\116\004\uff78\005\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\012\uff78\013\uff78\014\uff78\016\uff78\017\uff78" +
    "\020\uff78\021\uff78\022\uff78\024\uff78\025\uff78\026\uff78\027" +
    "\uff78\030\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78" +
    "\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\047" +
    "\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78" +
    "\056\uff78\001\002\000\116\004\uff6c\005\uff6c\006\uff6c\007" +
    "\uff6c\010\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\016\uff6c" +
    "\017\uff6c\020\uff6c\021\uff6c\022\uff6c\024\uff6c\025\uff6c\026" +
    "\uff6c\027\uff6c\030\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c" +
    "\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044" +
    "\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c" +
    "\055\uff6c\056\uff6c\001\002\000\116\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85" +
    "\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\024\uff85\025" +
    "\uff85\026\uff85\027\uff85\030\uff85\032\uff85\033\uff85\034\uff85" +
    "\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043" +
    "\uff85\044\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85" +
    "\054\uff85\055\uff85\056\uff85\001\002\000\116\004\uff79\005" +
    "\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79" +
    "\014\uff79\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79\024" +
    "\uff79\025\uff79\026\uff79\027\uff79\030\uff79\032\uff79\033\uff79" +
    "\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042" +
    "\uff79\043\uff79\044\uff79\047\uff79\050\uff79\051\uff79\052\uff79" +
    "\053\uff79\054\uff79\055\uff79\056\uff79\001\002\000\116\004" +
    "\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89" +
    "\013\uff89\014\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\032\uff89" +
    "\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041" +
    "\uff89\042\uff89\043\uff89\044\uff89\047\uff89\050\uff89\051\uff89" +
    "\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\001\002\000" +
    "\116\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70" +
    "\012\uff70\013\uff70\014\uff70\016\uff70\017\uff70\020\uff70\021" +
    "\uff70\022\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\047\uff70\050\uff70" +
    "\051\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70\001" +
    "\002\000\116\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72" +
    "\011\uff72\012\uff72\013\uff72\014\uff72\016\uff72\017\uff72\020" +
    "\uff72\021\uff72\022\uff72\024\uff72\025\uff72\026\uff72\027\uff72" +
    "\030\uff72\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037" +
    "\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\047\uff72" +
    "\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056" +
    "\uff72\001\002\000\116\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\016\uff8a\017" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\024\uff8a\025\uff8a\026\uff8a" +
    "\027\uff8a\030\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a" +
    "\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055" +
    "\uff8a\056\uff8a\001\002\000\116\004\uff81\005\uff81\006\uff81" +
    "\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\016" +
    "\uff81\017\uff81\020\uff81\021\uff81\022\uff81\024\uff81\025\uff81" +
    "\026\uff81\027\uff81\030\uff81\032\uff81\033\uff81\034\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81" +
    "\044\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054" +
    "\uff81\055\uff81\056\uff81\001\002\000\116\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\024\uff7f" +
    "\025\uff7f\026\uff7f\027\uff7f\030\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\001\002\000\116\004\uff77" +
    "\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013" +
    "\uff77\014\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77" +
    "\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77\032\uff77\033" +
    "\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77" +
    "\042\uff77\043\uff77\044\uff77\047\uff77\050\uff77\051\uff77\052" +
    "\uff77\053\uff77\054\uff77\055\uff77\056\uff77\001\002\000\116" +
    "\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012" +
    "\uff7c\013\uff7c\014\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c" +
    "\022\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\032" +
    "\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c" +
    "\041\uff7c\042\uff7c\043\uff7c\044\uff7c\047\uff7c\050\uff7c\051" +
    "\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\001\002" +
    "\000\004\022\300\001\002\000\116\004\uff7d\005\uff7d\006" +
    "\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d" +
    "\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\024\uff7d\025" +
    "\uff7d\026\uff7d\027\uff7d\030\uff7d\032\uff7d\033\uff7d\034\uff7d" +
    "\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043" +
    "\uff7d\044\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\054\uff7d\055\uff7d\056\uff7d\001\002\000\116\004\uff76\005" +
    "\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76" +
    "\014\uff76\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\032\uff76\033\uff76" +
    "\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042" +
    "\uff76\043\uff76\044\uff76\047\uff76\050\uff76\051\uff76\052\uff76" +
    "\053\uff76\054\uff76\055\uff76\056\uff76\001\002\000\116\004" +
    "\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e" +
    "\013\uff7e\014\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022" +
    "\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\032\uff7e" +
    "\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041" +
    "\uff7e\042\uff7e\043\uff7e\044\uff7e\047\uff7e\050\uff7e\051\uff7e" +
    "\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\001\002\000" +
    "\116\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e" +
    "\012\uff6e\013\uff6e\014\uff6e\016\uff6e\017\uff6e\020\uff6e\021" +
    "\uff6e\022\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e" +
    "\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040" +
    "\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e\047\uff6e\050\uff6e" +
    "\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\001" +
    "\002\000\116\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a" +
    "\011\uff7a\012\uff7a\013\uff7a\014\uff7a\016\uff7a\017\uff7a\020" +
    "\uff7a\021\uff7a\022\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a" +
    "\030\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037" +
    "\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\047\uff7a" +
    "\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056" +
    "\uff7a\001\002\000\116\004\uff80\005\uff80\006\uff80\007\uff80" +
    "\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80\016\uff80\017" +
    "\uff80\020\uff80\021\uff80\022\uff80\024\uff80\025\uff80\026\uff80" +
    "\027\uff80\030\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036" +
    "\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80" +
    "\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055" +
    "\uff80\056\uff80\001\002\000\116\004\uff6d\005\uff6d\006\uff6d" +
    "\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014\uff6d\016" +
    "\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d\024\uff6d\025\uff6d" +
    "\026\uff6d\027\uff6d\030\uff6d\032\uff6d\033\uff6d\034\uff6d\035" +
    "\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d" +
    "\044\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054" +
    "\uff6d\055\uff6d\056\uff6d\001\002\000\116\004\uff6f\005\uff6f" +
    "\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f\014" +
    "\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\024\uff6f" +
    "\025\uff6f\026\uff6f\027\uff6f\030\uff6f\032\uff6f\033\uff6f\034" +
    "\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f" +
    "\043\uff6f\044\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053" +
    "\uff6f\054\uff6f\055\uff6f\056\uff6f\001\002\000\116\004\uff69" +
    "\005\uff69\006\uff69\007\uff69\010\uff69\011\uff69\012\uff69\013" +
    "\uff69\014\uff69\016\uff69\017\uff69\020\uff69\021\uff69\022\uff69" +
    "\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69\032\uff69\033" +
    "\uff69\034\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041\uff69" +
    "\042\uff69\043\uff69\044\uff69\047\uff69\050\uff69\051\uff69\052" +
    "\uff69\053\uff69\054\uff69\055\uff69\056\uff69\001\002\000\116" +
    "\004\240\005\236\006\235\007\256\010\253\011\233\012" +
    "\231\013\243\014\251\016\232\017\244\020\276\021\257" +
    "\022\uffb3\024\271\025\260\026\266\027\264\030\262\032" +
    "\237\033\270\034\252\035\247\036\261\037\265\040\242" +
    "\041\246\042\241\043\255\044\230\047\254\050\273\051" +
    "\267\052\272\053\250\054\234\055\245\056\274\001\002" +
    "\000\116\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011" +
    "\uff82\012\uff82\013\uff82\014\uff82\016\uff82\017\uff82\020\uff82" +
    "\021\uff82\022\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030" +
    "\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82" +
    "\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\047\uff82\050" +
    "\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82" +
    "\001\002\000\004\022\uffb4\001\002\000\004\023\301\001" +
    "\002\000\032\005\ufff0\012\ufff0\013\ufff0\023\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\043\ufff0\056" +
    "\012\001\002\000\030\005\ufff3\012\ufff3\013\ufff3\023\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\037\ufff3\043" +
    "\ufff3\001\002\000\014\010\307\013\312\044\306\047\046" +
    "\050\050\001\002\000\004\027\uff29\001\002\000\004\027" +
    "\350\001\002\000\040\007\uff5a\014\uff5a\020\uff5a\021\uff5a" +
    "\022\uff5a\023\uff5a\024\uff5a\025\uff5a\027\uff5a\040\uff5a\041" +
    "\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a\001\002\000\010" +
    "\010\uffc9\013\075\044\074\001\002\000\010\007\uff5f\014" +
    "\uff5f\027\uff5f\001\002\000\026\020\315\021\314\022\313" +
    "\023\316\024\062\025\055\051\057\052\066\053\056\054" +
    "\065\001\002\000\034\007\uff60\014\uff60\020\uff58\021\uff58" +
    "\022\uff58\023\uff58\024\uff58\025\uff58\027\uff60\051\uff58\052" +
    "\uff58\053\uff58\054\uff58\001\002\000\010\010\307\013\321" +
    "\044\306\001\002\000\010\010\307\013\321\044\306\001" +
    "\002\000\010\010\307\013\321\044\306\001\002\000\010" +
    "\010\307\013\321\044\306\001\002\000\010\010\307\013" +
    "\321\044\306\001\002\000\024\007\uff62\014\uff62\020\315" +
    "\021\314\022\313\023\316\027\uff62\040\uff62\041\uff62\001" +
    "\002\000\040\007\uff58\014\uff58\020\uff58\021\uff58\022\uff58" +
    "\023\uff58\024\uff58\025\uff58\027\uff58\040\uff58\041\uff58\051" +
    "\uff58\052\uff58\053\uff58\054\uff58\001\002\000\014\007\uff51" +
    "\014\uff51\027\uff51\040\323\041\326\001\002\000\014\010" +
    "\uff50\013\uff50\044\uff50\047\uff50\050\uff50\001\002\000\010" +
    "\007\uff61\014\uff61\027\uff61\001\002\000\014\010\307\013" +
    "\331\044\306\047\046\050\050\001\002\000\014\010\uff4f" +
    "\013\uff4f\044\uff4f\047\uff4f\050\uff4f\001\002\000\026\020" +
    "\315\021\314\022\313\023\316\024\062\025\055\051\057" +
    "\052\066\053\056\054\065\001\002\000\014\007\uff55\014" +
    "\uff55\027\uff55\040\uff55\041\uff55\001\002\000\040\007\uff53" +
    "\014\uff53\020\uff58\021\uff58\022\uff58\023\uff58\024\uff58\025" +
    "\uff58\027\uff53\040\uff53\041\uff53\051\uff58\052\uff58\053\uff58" +
    "\054\uff58\001\002\000\014\007\uff51\014\uff51\027\uff51\040" +
    "\323\041\326\001\002\000\010\007\uff52\014\uff52\027\uff52" +
    "\001\002\000\014\007\uff51\014\uff51\027\uff51\040\323\041" +
    "\326\001\002\000\010\007\uff54\014\uff54\027\uff54\001\002" +
    "\000\010\010\307\013\321\044\306\001\002\000\024\007" +
    "\uff57\014\uff57\020\315\021\314\022\313\023\316\027\uff57" +
    "\040\uff57\041\uff57\001\002\000\014\007\uff51\014\uff51\027" +
    "\uff51\040\323\041\326\001\002\000\010\007\uff56\014\uff56" +
    "\027\uff56\001\002\000\040\007\uff5b\014\uff5b\020\uff5b\021" +
    "\uff5b\022\uff5b\023\uff5b\024\uff5b\025\uff5b\027\uff5b\040\uff5b" +
    "\041\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b\001\002\000" +
    "\040\007\uff5e\014\uff5e\020\uff5e\021\uff5e\022\313\023\316" +
    "\024\uff5e\025\uff5e\027\uff5e\040\uff5e\041\uff5e\051\uff5e\052" +
    "\uff5e\053\uff5e\054\uff5e\001\002\000\040\007\uff5d\014\uff5d" +
    "\020\uff5d\021\uff5d\022\313\023\316\024\uff5d\025\uff5d\027" +
    "\uff5d\040\uff5d\041\uff5d\051\uff5d\052\uff5d\053\uff5d\054\uff5d" +
    "\001\002\000\040\007\uff5c\014\uff5c\020\uff5c\021\uff5c\022" +
    "\uff5c\023\uff5c\024\uff5c\025\uff5c\027\uff5c\040\uff5c\041\uff5c" +
    "\051\uff5c\052\uff5c\053\uff5c\054\uff5c\001\002\000\004\010" +
    "\347\001\002\000\040\007\uff59\014\uff59\020\uff59\021\uff59" +
    "\022\uff59\023\uff59\024\uff59\025\uff59\027\uff59\040\uff59\041" +
    "\uff59\051\uff59\052\uff59\053\uff59\054\uff59\001\002\000\004" +
    "\011\351\001\002\000\022\012\ufff0\013\ufff0\023\ufff0\031" +
    "\ufff0\035\ufff0\037\ufff0\043\ufff0\056\012\001\002\000\020" +
    "\012\uff49\013\040\023\033\031\025\035\032\037\026\043" +
    "\041\001\002\000\004\012\uff28\001\002\000\004\012\355" +
    "\001\002\000\026\005\uff25\012\uff25\013\uff25\023\uff25\031" +
    "\uff25\035\uff25\036\356\037\uff25\043\uff25\056\uff25\001\002" +
    "\000\004\011\360\001\002\000\024\005\uff27\012\uff27\013" +
    "\uff27\023\uff27\031\uff27\035\uff27\037\uff27\043\uff27\056\uff27" +
    "\001\002\000\022\012\ufff0\013\ufff0\023\ufff0\031\ufff0\035" +
    "\ufff0\037\ufff0\043\ufff0\056\012\001\002\000\020\012\uff49" +
    "\013\040\023\033\031\025\035\032\037\026\043\041\001" +
    "\002\000\004\012\363\001\002\000\024\005\uff26\012\uff26" +
    "\013\uff26\023\uff26\031\uff26\035\uff26\037\uff26\043\uff26\056" +
    "\uff26\001\002\000\022\005\uff49\012\uff49\013\040\023\033" +
    "\031\025\035\032\037\026\043\041\001\002\000\006\005" +
    "\uff4b\012\uff4b\001\002\000\022\005\uff49\012\uff49\013\040" +
    "\023\033\031\025\035\032\037\026\043\041\001\002\000" +
    "\006\005\uff4c\012\uff4c\001\002\000\010\002\ufff4\042\014" +
    "\056\373\001\002\000\004\002\ufff6\001\002\000\004\002" +
    "\ufff7\001\002\000\010\002\ufff4\042\014\056\373\001\002" +
    "\000\004\002\ufff5\001\002\000\014\010\307\013\312\044" +
    "\306\047\046\050\050\001\002\000\004\027\377\001\002" +
    "\000\004\011\u0100\001\002\000\022\012\ufff0\013\ufff0\023" +
    "\ufff0\031\ufff0\035\ufff0\037\ufff0\043\ufff0\056\012\001\002" +
    "\000\020\012\uff49\013\040\023\033\031\025\035\032\037" +
    "\026\043\041\001\002\000\004\012\u0103\001\002\000\024" +
    "\005\uff2a\012\uff2a\013\uff2a\023\uff2a\031\uff2a\035\uff2a\037" +
    "\uff2a\043\uff2a\056\uff2a\001\002\000\004\013\u013a\001\002" +
    "\000\004\002\uffff\001\002\000\004\013\u0126\001\002\000" +
    "\004\002\ufffc\001\002\000\004\013\u010b\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\ufffe\001\002\000\010\007" +
    "\uffe9\014\uffe9\017\uffe9\001\002\000\010\007\uffd1\014\uffd1" +
    "\017\u010d\001\002\000\010\010\u0118\013\u0117\044\u0116\001" +
    "\002\000\004\014\u0121\001\002\000\006\007\u0110\014\uffc3" +
    "\001\002\000\004\013\u0112\001\002\000\004\014\uffd0\001" +
    "\002\000\010\007\uffc5\014\uffc5\017\uffc8\001\002\000\006" +
    "\007\u0110\014\uffc3\001\002\000\004\017\u0115\001\002\000" +
    "\010\010\u0118\013\u0117\044\u0116\001\002\000\010\007\uffcd" +
    "\014\uffcd\020\uffcd\001\002\000\010\007\uffcc\014\uffcc\020" +
    "\uffcc\001\002\000\010\010\uffc9\013\075\044\074\001\002" +
    "\000\010\007\uffc7\014\uffc7\020\u011a\001\002\000\010\010" +
    "\u0118\013\u0117\044\u0116\001\002\000\006\007\u0110\014\uffc3" +
    "\001\002\000\004\014\uffc6\001\002\000\010\007\uffcf\014" +
    "\uffcf\020\uffcf\001\002\000\004\010\u011f\001\002\000\010" +
    "\007\uffce\014\uffce\020\uffce\001\002\000\004\014\uffc4\001" +
    "\002\000\020\002\ufff0\005\ufff0\023\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\056\012\001\002\000\016\002\uffe8\005\uffe8\023" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\001\002\000\010\007\uffd3" +
    "\014\uffd3\020\u011a\001\002\000\006\007\u0110\014\uffc3\001" +
    "\002\000\004\014\uffd2\001\002\000\010\007\uffe7\014\uffe7" +
    "\017\uffe7\001\002\000\010\007\uffc0\014\uffc0\017\u012a\001" +
    "\002\000\004\014\u0138\001\002\000\006\007\u012d\014\uffb7" +
    "\001\002\000\014\010\307\013\312\044\306\047\046\050" +
    "\050\001\002\000\006\007\uffc2\014\uffc2\001\002\000\006" +
    "\007\u012d\014\uffb7\001\002\000\004\013\u012f\001\002\000" +
    "\004\014\uffc1\001\002\000\010\007\uffb9\014\uffb9\017\uffbc" +
    "\001\002\000\006\007\u012d\014\uffb7\001\002\000\004\017" +
    "\u0132\001\002\000\014\010\307\013\312\044\306\047\046" +
    "\050\050\001\002\000\006\007\uffbb\014\uffbb\001\002\000" +
    "\006\007\u012d\014\uffb7\001\002\000\004\014\uffba\001\002" +
    "\000\004\014\uffb8\001\002\000\004\014\uffbf\001\002\000" +
    "\020\002\ufff0\005\ufff0\023\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\056\012\001\002\000\016\002\uffe6\005\uffe6\023\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\001\002\000\010\007\uffeb\014\uffeb" +
    "\017\uffeb\001\002\000\010\007\uffe3\014\uffe3\017\u013d\001" +
    "\002\000\004\014\u014c\001\002\000\006\013\125\044\123" +
    "\001\002\000\006\007\u013f\014\uffd4\001\002\000\004\013" +
    "\u0141\001\002\000\004\014\uffe2\001\002\000\010\007\uffd6" +
    "\014\uffd6\017\uffd9\001\002\000\006\007\u013f\014\uffd4\001" +
    "\002\000\004\017\u0144\001\002\000\006\013\125\044\123" +
    "\001\002\000\016\007\uffd8\014\uffd8\020\130\021\132\022" +
    "\127\023\131\001\002\000\006\007\u013f\014\uffd4\001\002" +
    "\000\004\014\uffd7\001\002\000\004\014\uffd5\001\002\000" +
    "\016\007\uffe5\014\uffe5\020\130\021\132\022\127\023\131" +
    "\001\002\000\006\007\u013f\014\uffd4\001\002\000\004\014" +
    "\uffe4\001\002\000\020\002\ufff0\005\ufff0\023\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\056\012\001\002\000\016\002\uffea\005" +
    "\uffea\023\uffea\032\uffea\033\uffea\034\uffea\001\002\000\016" +
    "\005\ufff0\023\ufff0\032\ufff0\033\ufff0\034\ufff0\056\012\001" +
    "\002\000\014\005\uffec\023\033\032\u0104\033\u0108\034\u0106" +
    "\001\002\000\014\005\uffee\023\uffee\032\uffee\033\uffee\034" +
    "\uffee\001\002\000\004\005\u0154\001\002\000\014\005\uffec" +
    "\023\033\032\u0104\033\u0108\034\u0106\001\002\000\004\005" +
    "\uffef\001\002\000\006\042\ufffa\056\ufffa\001\002\000\014" +
    "\005\uffec\023\033\032\u0104\033\u0108\034\u0106\001\002\000" +
    "\004\005\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\006\002\006\003\005\001\001\000\002\001" +
    "\001\000\014\004\u0106\010\u0104\024\u0109\031\u0108\062\035" +
    "\001\001\000\004\055\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\014\001\001\000\004\055\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\017\001\001\000\002" +
    "\001\001\000\004\064\021\001\001\000\002\001\001\000" +
    "\004\055\023\001\001\000\020\006\036\023\026\024\034" +
    "\031\033\034\027\040\030\062\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\365" +
    "\001\001\000\004\055\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\152\001\001\000\004\055\150" +
    "\001\001\000\002\001\001\000\020\006\036\023\077\024" +
    "\034\031\033\034\027\040\030\062\035\001\001\000\004" +
    "\114\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\044\025\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\075\001\001\000\004\030\063\001\001" +
    "\000\006\021\044\025\072\001\001\000\006\021\044\025" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\044\025\070\001" +
    "\001\000\002\001\001\000\006\021\044\025\067\001\001" +
    "\000\006\021\044\025\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\063\001\001\000\004\030\063" +
    "\001\001\000\004\030\063\001\001\000\004\030\063\001" +
    "\001\000\004\030\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\115\101\001\001\000\004\032\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\114\001" +
    "\001\000\004\016\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\147\001\001\000\004\032\146\001" +
    "\001\000\004\032\145\001\001\000\004\032\144\001\001" +
    "\000\002\001\001\000\004\117\116\001\001\000\004\032" +
    "\117\001\001\000\004\120\120\001\001\000\002\001\001" +
    "\000\006\012\125\033\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\137\001\001\000\004\012\136\001\001\000\004\012" +
    "\135\001\001\000\004\012\134\001\001\000\004\012\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\125" +
    "\033\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\036\023\151\024" +
    "\034\031\033\034\027\040\030\062\035\001\001\000\002" +
    "\001\001\000\020\006\036\023\153\024\034\031\033\034" +
    "\027\040\030\062\035\001\001\000\002\001\001\000\006" +
    "\054\274\057\262\001\001\000\006\053\170\056\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\053\170\056\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\054\274\057\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\301\001\001\000\002\001\001\000\012\021\307" +
    "\035\304\060\303\061\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\345\001\001" +
    "\000\002\001\001\000\004\030\316\001\001\000\002\001" +
    "\001\000\004\061\344\001\001\000\004\061\343\001\001" +
    "\000\004\061\342\001\001\000\004\061\341\001\001\000" +
    "\004\061\317\001\001\000\004\110\321\001\001\000\002" +
    "\001\001\000\006\026\323\045\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\327\061\326\001\001" +
    "\000\002\001\001\000\004\030\335\001\001\000\004\112" +
    "\333\001\001\000\004\113\331\001\001\000\006\026\332" +
    "\045\324\001\001\000\002\001\001\000\006\026\334\045" +
    "\324\001\001\000\002\001\001\000\004\061\336\001\001" +
    "\000\004\111\337\001\001\000\006\026\340\045\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\351\001\001" +
    "\000\022\006\036\023\352\024\034\031\033\034\027\037" +
    "\353\040\030\062\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\356\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\360\001\001\000\022\006\036" +
    "\023\352\024\034\031\033\034\027\037\361\040\030\062" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\036\023\364\024\034\031\033\034\027\040\030\062" +
    "\035\001\001\000\002\001\001\000\020\006\036\023\366" +
    "\024\034\031\033\034\027\040\030\062\035\001\001\000" +
    "\002\001\001\000\006\004\370\005\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\370\005\373\001" +
    "\001\000\002\001\001\000\012\021\307\035\375\060\303" +
    "\061\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\u0100\001\001\000\022\006\036\023\352\024\034" +
    "\031\033\034\027\037\u0101\040\030\062\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\u010b" +
    "\001\001\000\006\014\u010d\077\u010e\001\001\000\004\015" +
    "\u0122\001\001\000\002\001\001\000\004\017\u0110\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\100\u0113\102" +
    "\u0112\001\001\000\004\017\u011f\001\001\000\002\001\001" +
    "\000\004\015\u0118\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u011d\001\001\000\004\101\u011a\001\001" +
    "\000\004\015\u011c\001\001\000\004\017\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\u0121\001\001\000" +
    "\002\001\001\000\004\076\u0123\001\001\000\004\017\u0124" +
    "\001\001\000\002\001\001\000\004\070\u0126\001\001\000" +
    "\006\020\u0127\104\u0128\001\001\000\002\001\001\000\004" +
    "\022\u0136\001\001\000\010\021\307\060\u012a\061\310\001" +
    "\001\000\004\103\u012b\001\001\000\004\022\u012d\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\105\u0130\107" +
    "\u012f\001\001\000\004\022\u0135\001\001\000\002\001\001" +
    "\000\010\021\307\060\u0132\061\310\001\001\000\004\106" +
    "\u0133\001\001\000\004\022\u0134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u0138\001" +
    "\001\000\002\001\001\000\004\066\u013a\001\001\000\006" +
    "\011\u013b\072\u013d\001\001\000\002\001\001\000\004\012" +
    "\u0148\001\001\000\004\013\u013f\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\073\u0142\075\u0141\001\001\000" +
    "\004\013\u0147\001\001\000\002\001\001\000\004\012\u0144" +
    "\001\001\000\004\074\u0145\001\001\000\004\013\u0146\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\u0149" +
    "\001\001\000\004\013\u014a\001\001\000\002\001\001\000" +
    "\004\055\u014c\001\001\000\002\001\001\000\004\055\u014e" +
    "\001\001\000\010\006\u014f\007\u0150\010\u0151\001\001\000" +
    "\004\065\u0154\001\001\000\002\001\001\000\010\006\u014f" +
    "\007\u0152\010\u0151\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\u014f\007\u0155\010\u0151\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoPnt$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoPnt$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoPnt$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    TablaSimbolos tablaSimbolosVariables;
    TablaSimbolos tablaSimbolos;
    TablaSimbolos tablaSimbolosPintar;
    TablaSimbolos tablaSimbolosColores;
    TablaSimbolos tablaSimbolosImagenes;
    public ArrayList<ErrorG> listaErrores = new  ArrayList<>();

    public void setTabla(TablaSimbolos tablaSimbolos){
        this.tablaSimbolos = tablaSimbolos; 
    }

    public TablaSimbolos getTablaSimbolos(){
        return tablaSimbolos; 
    }

    public void setTablaVariables(TablaSimbolos tablaSimbolosVariables){
        this.tablaSimbolosVariables = tablaSimbolosVariables; 
    }

    public TablaSimbolos getTablaVariables(){
        return tablaSimbolosVariables; 
    }
    
    public void setTablaPintar(TablaSimbolos tablaSimbolosPintar){
        this.tablaSimbolosPintar = tablaSimbolosPintar; 
    }

    public TablaSimbolos getTablaPintar(){
        return tablaSimbolosPintar; 
    }



    public void setTablaColores(TablaSimbolos tablaSimbolosColores){
        this.tablaSimbolosColores = tablaSimbolosColores; 
    }

    public void setTablaImagenes(TablaSimbolos tablaSimbolosImagenes){
        this.tablaSimbolosImagenes = tablaSimbolosImagenes; 
    }











    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            if(s!=null){
                ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                listaErrores.add(e);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoPnt$actions {


    TablaSimbolos tablaSimbolosVariables = new TablaSimbolos();
    TablaSimbolos tablaSimbolosPintar = new TablaSimbolos();
    TablaSimbolos tablaSimbolosColores;
    TablaSimbolos tablaSimbolosImagenes;
    int entero, tipoIdP;
    String texto, lienzoInstruccion;
    String nombre;
    boolean boleano;
    boolean correcto;
    VerificadorDatos verificadorDatos = new VerificadorDatos();

    public boolean verificarTipoDato(Object o){
        try {
		Integer.parseInt((String) o);
		return true;
	} catch (NumberFormatException nfe){
		return false;
	}
        catch (ClassCastException ex){
		return true;
	}
    }

  private final AnalizadorSintacticoPnt parser;

  /** Constructor */
  CUP$AnalizadorSintacticoPnt$actions(AnalizadorSintacticoPnt parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoPnt$do_action(
    int                        CUP$AnalizadorSintacticoPnt$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoPnt$parser,
    java.util.Stack            CUP$AnalizadorSintacticoPnt$stack,
    int                        CUP$AnalizadorSintacticoPnt$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoPnt$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoPnt$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // ESTRUC_ELSE ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUC_ELSE",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // ESTRUC_ELSE ::= ELSE LLAVES_A FINALIZAR CONTENIDO LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUC_ELSE",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // ESTRUC_IF_ELSE ::= IF PARENTESIS_A CONDICION_L PARENTESIS_C LLAVES_A FINALIZAR CONTENIDO LLAVES_C ESTRUC_ELSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-6)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUC_IF_ELSE",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CONTENIDO ::= ESTRUCTURA_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CONTENIDO",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CONDICION_L ::= OPERACION_BOOLEANA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 RESULT = a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CONDICION_L",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ESTRUC_WHILE ::= WHILE PARENTESIS_A CONDICION_L PARENTESIS_C LLAVES_A FINALIZAR CONTENIDO LLAVES_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUC_WHILE",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // PRMT1 ::= OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		RESULT = new Rango(verificadorDatos.convertirNumero(a),verificadorDatos.convertirNumero(a));
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("PRMT1",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // PRMT1 ::= OPERACION PUNTO_PUNTO OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		RESULT = new Rango(verificadorDatos.convertirNumero(a),verificadorDatos.convertirNumero(b));
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("PRMT1",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // PRMT ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		  int existeVa = 0;
                            Object obje = tablaSimbolosVariables.getObjetoC((String) a);
                            if(obje!=null){
                                existeVa = 1;
                            }
                            /*
                            if(tipoIdP==1 && existeVa==0){
                                obje = parser.tablaSimbolosColores.getObjetoN((String) a, lienzoInstruccion);
                            }else if(tipoIdP==2 && existeVa==0){
                                obje = parser.tablaSimbolosImagenes.getObjetoN((String) a, lienzoInstruccion);
                            }
                            */
                            if(obje!=null){
                                RESULT = obje;
                            }else{
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                                RESULT = " ";
                            }
                
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("PRMT",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // PRMT ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("PRMT",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // PRMT ::= COMILLAS TIPO_TEXTO COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("PRMT",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // PRMT ::= PRMT DIAGONAL PRMT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 
                        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
                            int val1 = verificadorDatos.convertirNumero(a);
                            int val2 = verificadorDatos.convertirNumero(b);
                            int r = val1 / val2;
                            System.out.println("valor: "+r);
                            RESULT = r;
                        }else{
                            correcto = false;
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            parser.listaErrores.add(e);
                            System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            RESULT = "";
                        }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("PRMT",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // PRMT ::= PRMT ASTERISCO PRMT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 
                        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
                            int val1 = verificadorDatos.convertirNumero(a);
                            int val2 = verificadorDatos.convertirNumero(b);
                            int r = val1 * val2;
                            System.out.println("valor: "+r);
                            RESULT = r;
                        }else{
                            correcto = false;
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            parser.listaErrores.add(e);
                            System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            RESULT = "";
                        }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("PRMT",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // PRMT ::= PRMT MENOS PRMT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 
                        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
                            int val1 = verificadorDatos.convertirNumero(a);
                            int val2 = verificadorDatos.convertirNumero(b);
                            int r = val1 - val2;
                            System.out.println("valor: "+r);
                            RESULT = r;
                        }else{
                            correcto = false;
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            parser.listaErrores.add(e);
                            System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            RESULT = "";
                        }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("PRMT",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // PRMT ::= PRMT MAS PRMT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		
        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
            int val1 = verificadorDatos.convertirNumero(a);
            int val2 = verificadorDatos.convertirNumero(b);
            int r = val1 + val2;
            System.out.println("valor: "+r);
            RESULT = r;
        }else{
            String tex = a+""+b;
            RESULT = tex;
        }        
        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("PRMT",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ESTRUC_PINTAR ::= TIPO_PINTAR PARENTESIS_A NT$26 PRMT NT$27 COMA NT$28 PRMT NT$29 COMA PRMT1 COMA PRMT1 PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		

                if(correcto){
                    Lienzo li = parser.tablaSimbolos.getLienzo(lienzoInstruccion);
                    Rango rX = (Rango)c;
                    Rango rY = (Rango)d;
                    if(li!=null){
                        if(li.getDimensionX()>=rX.getInicio() && li.getDimensionX()>=rX.getFin() && li.getDimensionY()>=rY.getInicio() && li.getDimensionY()>=rY.getFin()){
                            Pintar p = new Pintar(lienzoInstruccion, (String)a, (String)b, (Rango)c, (Rango)d);
                            SimboloObject s = new SimboloObject("Pintar", lienzoInstruccion , p);
                            tablaSimbolosPintar.agregarSimbolo(s);
                            System.out.println("==========================================AGREGO PINTAR");
                        }else{
                            ErrorG e = null;
                            //error dato duplicado
                            System.out.println("se duplico algun atributo");
                            if(li.getDimensionX()<=rX.getInicio()){
                                e = new ErrorG(cright+1,cleft+1,(String) a,"Semantico","El simbolo "+rX.getInicio()+" es muy grande que: "+li.getDimensionX());
                                parser.listaErrores.add(e);
                                System.out.println("Error Semantico: El simbolo "+rX.getInicio()+" es muy grande que: "+li.getDimensionX());
                            }
                            if(li.getDimensionX()<=rX.getFin()){
                                e = new ErrorG(cright+1,cleft+1,(String) a,"Semantico","El simbolo "+rX.getFin()+" es muy grande que: "+li.getDimensionX());
                                parser.listaErrores.add(e);
                                System.out.println("Semantico Semantico: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                            }

                            if(li.getDimensionY()<=rY.getInicio()){
                                e = new ErrorG(dright+1,dleft+1,(String) a,"Semantico","El simbolo "+rY.getInicio()+" es muy grande que: "+li.getDimensionY());
                                parser.listaErrores.add(e);
                                System.out.println("Error Semantico: El simbolo "+rY.getInicio()+" es muy grande que: "+li.getDimensionY());
                            }

                            if(li.getDimensionY()<=rY.getFin()){
                                e = new ErrorG(dright+1,dleft+1,(String) a,"Semantico","El simbolo "+rY.getFin()+" es muy grande que: "+li.getDimensionY());
                                parser.listaErrores.add(e);
                                System.out.println("Error Semantico: El simbolo "+rY.getFin()+" es muy grande que: "+li.getDimensionY());
                            }
                            System.out.println(li.getDimensionX()+">="+rX.getInicio() +"   "+ li.getDimensionX()+">="+rX.getFin() +"   "+ li.getDimensionY()+">="+rY.getInicio() +"   "+ li.getDimensionY()+">="+rY.getFin());
                            System.out.println("-------------------------------------- NO AGREGO PINTAR");
                        }
                    }else{
                        System.out.println("NO ENCONTRO EL LIENZO");
                    }
                    
                }


              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUC_PINTAR",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-14)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;

                            Object obje = parser.tablaSimbolosImagenes.getObjetoN((String) b, lienzoInstruccion);
                            if(obje==null){
                                correcto = false;
                                ErrorG e = new ErrorG(bright+1,bleft+1,(String) b,"Semantico","El simbolo "+(String) b+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) b+" no existe o no tiene valor");
                            }
                
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$29",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
tipoIdP = 2;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$28",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;

                            Object obje = parser.tablaSimbolosColores.getObjetoN((String) a, lienzoInstruccion);
                            if(obje==null){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                            }
                
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$27",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // NT$26 ::= 
            {
              Object RESULT =null;
tipoIdP = 1;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$26",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TIPO_PINTAR ::= PINTAR_MIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPO_PINTAR",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TIPO_PINTAR ::= PINTAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPO_PINTAR",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TIPO_DATO ::= TIPO_BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TIPO_DATO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TIPO_DATO ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ASIG ::= TIPO_BOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ASIG ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		
                            Object obje = tablaSimbolosVariables.getObjetoC((String) a);
                            if(obje!=null){
                                RESULT = obje;
                            }else{
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                                RESULT = 0;
                            }
                
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ASIG ::= COMILLAS TIPO_TEXTO COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ASIG ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ASIG ::= ASIG OPERADOR_RACIONAL ASIG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		
                            verificadorDatos.verificar(a,b, (int) o);
                            if(!verificadorDatos.existeError){
                                System.out.println(" -----"+verificadorDatos.resultado);
                                
                                RESULT = verificadorDatos.resultado;
                            }else{
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                                RESULT = false;
                                
                            }
                           
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ASIG ::= ASIG DIAGONAL ASIG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 
                        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
                            int val1 = verificadorDatos.convertirNumero(a);
                            int val2 = verificadorDatos.convertirNumero(b);
                            int r = val1 / val2;
                            System.out.println("valor: "+r);
                            RESULT = r;
                        }else{
                            correcto = false;
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            parser.listaErrores.add(e);
                            System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            RESULT = "";
                        }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ASIG ::= ASIG ASTERISCO ASIG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 
                        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
                            int val1 = verificadorDatos.convertirNumero(a);
                            int val2 = verificadorDatos.convertirNumero(b);
                            int r = val1 * val2;
                            System.out.println("valor: "+r);
                            RESULT = r;
                        }else{
                            correcto = false;
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            parser.listaErrores.add(e);
                            System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            RESULT = "";
                        }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ASIG ::= ASIG MENOS ASIG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 
                        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
                            int val1 = verificadorDatos.convertirNumero(a);
                            int val2 = verificadorDatos.convertirNumero(b);
                            int r = val1 - val2;
                            System.out.println("valor: "+r);
                            RESULT = r;
                        }else{
                            correcto = false;
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            parser.listaErrores.add(e);
                            System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            RESULT = "";
                        }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ASIG ::= ASIG MAS ASIG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		
        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
            int val1 = verificadorDatos.convertirNumero(a);
            int val2 = verificadorDatos.convertirNumero(b);
            int r = val1 + val2;
            System.out.println("valor: "+r);
            RESULT = r;
        }else{
            String tex = a+""+b;
            RESULT = tex;
        }        
        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ASIGNACION_VALORES ::= IDENTIFICADOR NT$25 IGUAL ASIG PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		
                        if(correcto){
                            if(verificadorDatos.verificarTipoDato(b)){
                                SimboloObject simbol = tablaSimbolosVariables.getSimbolo(nombre);
                                if(simbol.getTipo().equals("Int")){
                                    tablaSimbolosVariables.modificar(nombre,"Int",b);
                                }else{
                                    
                                    ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                                    parser.listaErrores.add(e);
                                    System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");  
                                }
                            }else if(verificadorDatos.verificarTipoObjeto(b)==2){
                                SimboloObject simbol = tablaSimbolosVariables.getSimbolo(nombre);
                                if(simbol.getTipo().equals("Booleano")){
                                    tablaSimbolosVariables.modificar(nombre,"Booleano",b);
                                }else{
                                    
                                    ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                                    parser.listaErrores.add(e);
                                    System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");  
                                }
                            }else{
                                SimboloObject simbol = tablaSimbolosVariables.getSimbolo(nombre);
                                if(simbol.getTipo().equals("String")){
                                    tablaSimbolosVariables.modificar(nombre,"String",b);
                                }else{
                                    
                                    ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                                    parser.listaErrores.add(e);
                                    System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");  
                                }

                            }
                        }
                        
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VALORES",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$25 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
nombre = (String )a; correcto = true;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$25",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ESTRUCTURA_INSTRUCCIONES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ESTRUCTURA_INSTRUCCIONES ::= COMENTARIO ESTRUCTURA_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ESTRUCTURA_INSTRUCCIONES ::= ESTRUC_IF_ELSE FINALIZAR ESTRUCTURA_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ESTRUCTURA_INSTRUCCIONES ::= ESTRUC_WHILE FINALIZAR ESTRUCTURA_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ESTRUCTURA_INSTRUCCIONES ::= ESTRUC_PINTAR FINALIZAR ESTRUCTURA_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ESTRUCTURA_INSTRUCCIONES ::= ASIGNACION_VALORES FINALIZAR ESTRUCTURA_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_INSTRUCCIONES",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // OPERA_LOGICA ::= OR 
            {
              Object RESULT =null;
		RESULT = 2;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERA_LOGICA",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OPERA_LOGICA ::= AND 
            {
              Object RESULT =null;
		RESULT = 1;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERA_LOGICA",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OPERADOR_LOGICO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OPERADOR_LOGICO ::= OPERA_LOGICA IDENTIFICADOR NT$24 OPERADOR_LOGICO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$24 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;

                            boolean resultado2;
                            if(verificadorDatos.verificarTipoObjeto(a)==2){
                                
                                resultado2 = (boolean) a;
                                if((int) n ==1){
                                    if(boleano && resultado2){
                                        boleano = true;
                                    }else{
                                        boleano = false;
                                    }
                                    
                                }else{
                                    
                                    if(boleano || resultado2){
                                        boleano = true;
                                    }else{
                                        boleano = false;
                                    }
                                }
                            }else{
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                                RESULT = false;
                                resultado2 = false;
                            }
                            
                           
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$24",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OPERADOR_LOGICO ::= OPERA_LOGICA TIPO_BOOL NT$23 OPERADOR_LOGICO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		RESULT = boleano;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$23 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;

                                boolean resultado2;
                                resultado2 = (boolean) a;
                            
                                if((int) n ==1){
                                    if(boleano && resultado2){
                                        boleano = true;
                                    }else{
                                        boleano = false;
                                    }
                                    
                                }else{
                                    
                                    if(boleano || resultado2){
                                        boleano = true;
                                    }else{
                                        boleano = false;
                                    }
                                }
                           
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$23",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OPERADOR_LOGICO ::= OPERA_LOGICA DATOS_BOOLEANOS OPERADOR_RACIONAL DATOS_BOOLEANOS NT$22 OPERADOR_LOGICO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		RESULT = boleano;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$22 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;

                            verificadorDatos.verificar(a,b, (int) o);
                            boolean resultado2;
                            if(!verificadorDatos.existeError){
                                System.out.println(" -----"+verificadorDatos.resultado);
                                resultado2 = verificadorDatos.resultado;
                                if((int) n ==1){
                                    if(boleano && resultado2){
                                        boleano = true;
                                    }else{
                                        boleano = false;
                                    }
                                    
                                }else{
                                    
                                    if(boleano || resultado2){
                                        boleano = true;
                                    }else{
                                        boleano = false;
                                    }
                                }
                            }else{
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                                RESULT = false;
                                resultado2 = false;
                            }
                           
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$22",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DATOS_BOOLEANOS ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		
                            Object obje = tablaSimbolosVariables.getObjetoC((String) a);
                            if(obje!=null){
                                RESULT = obje;
                            }else{
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                                RESULT = 0;
                            }
                
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("DATOS_BOOLEANOS",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DATOS_BOOLEANOS ::= COMILLAS TIPO_TEXTO COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("DATOS_BOOLEANOS",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DATOS_BOOLEANOS ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("DATOS_BOOLEANOS",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DATOS_BOOLEANOS ::= DATOS_BOOLEANOS DIAGONAL DATOS_BOOLEANOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 
                        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
                            int val1 = verificadorDatos.convertirNumero(a);
                            int val2 = verificadorDatos.convertirNumero(b);
                            int r = val1 / val2;
                            System.out.println("valor: "+r);
                            RESULT = r;
                        }else{
                            correcto = false;
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            parser.listaErrores.add(e);
                            System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            RESULT = "";
                        }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("DATOS_BOOLEANOS",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DATOS_BOOLEANOS ::= DATOS_BOOLEANOS ASTERISCO DATOS_BOOLEANOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 
                        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
                            int val1 = verificadorDatos.convertirNumero(a);
                            int val2 = verificadorDatos.convertirNumero(b);
                            int r = val1 * val2;
                            System.out.println("valor: "+r);
                            RESULT = r;
                        }else{
                            correcto = false;
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            parser.listaErrores.add(e);
                            System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            RESULT = "";
                        }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("DATOS_BOOLEANOS",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DATOS_BOOLEANOS ::= DATOS_BOOLEANOS MENOS DATOS_BOOLEANOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 
                        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
                            int val1 = verificadorDatos.convertirNumero(a);
                            int val2 = verificadorDatos.convertirNumero(b);
                            int r = val1 - val2;
                            System.out.println("valor: "+r);
                            RESULT = r;
                        }else{
                            correcto = false;
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            parser.listaErrores.add(e);
                            System.out.println("Semantico: El simbolo "+a+" o "+b+" no son del mismo tipo de variable");
                            RESULT = "";
                        }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("DATOS_BOOLEANOS",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DATOS_BOOLEANOS ::= DATOS_BOOLEANOS MAS DATOS_BOOLEANOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 
                        if(verificadorDatos.verificarTipoDato(a) && verificadorDatos.verificarTipoDato(b)){
                            int val1 = verificadorDatos.convertirNumero(a);
                            int val2 = verificadorDatos.convertirNumero(b);
                            int r = val1 + val2;
                            System.out.println("valor: "+r);
                            RESULT = r;
                        }else{
                            String tex = a+""+b;
                            RESULT = tex;
                        }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("DATOS_BOOLEANOS",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OPERACION_BOOLEANA ::= TIPO_BOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		RESULT = a;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERACION_BOOLEANA",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OPERACION_BOOLEANA ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		
                            Object obje = tablaSimbolosVariables.getObjetoC((String) a);
                            if(obje!=null){
                                RESULT = obje;
                            }else{
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                                RESULT = false;
                            }
                
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERACION_BOOLEANA",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OPERACION_BOOLEANA ::= DATOS_BOOLEANOS OPERADOR_RACIONAL DATOS_BOOLEANOS NT$21 OPERADOR_LOGICO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		RESULT = boleano;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERACION_BOOLEANA",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$21 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;

                            verificadorDatos.verificar(a,b, (int) o);
                            if(!verificadorDatos.existeError){
                                System.out.println(" -----"+verificadorDatos.resultado);
                                boleano = verificadorDatos.resultado;
                                //RESULT = verificadorDatos.resultado;
                            }else{
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                                //RESULT = false;
                                boleano = false;
                            }
                           
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$21",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OPERADOR_RACIONAL ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT = 6;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERADOR_RACIONAL",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OPERADOR_RACIONAL ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT = 5;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERADOR_RACIONAL",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OPERADOR_RACIONAL ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT = 4;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERADOR_RACIONAL",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPERADOR_RACIONAL ::= MAYOR_QUE 
            {
              Object RESULT =null;
		RESULT = 3;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERADOR_RACIONAL",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPERADOR_RACIONAL ::= MENOR_QUE 
            {
              Object RESULT =null;
		RESULT = 2;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERADOR_RACIONAL",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPERADOR_RACIONAL ::= IGUAL_IGUAL 
            {
              Object RESULT =null;
		RESULT = 1;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERADOR_RACIONAL",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LO_QUE_SEA_SALTO ::= SALTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LO_QUE_SEA_SALTO ::= PUNTO_PUNTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LO_QUE_SEA_SALTO ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LO_QUE_SEA_SALTO ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LO_QUE_SEA_SALTO ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LO_QUE_SEA_SALTO ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LO_QUE_SEA_SALTO ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LO_QUE_SEA_SALTO ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LO_QUE_SEA_SALTO ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LO_QUE_SEA_SALTO ::= PINTAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LO_QUE_SEA_SALTO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LO_QUE_SEA_SALTO ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LO_QUE_SEA_SALTO ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LO_QUE_SEA_SALTO ::= WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LO_QUE_SEA_SALTO ::= ELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LO_QUE_SEA_SALTO ::= IF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // LO_QUE_SEA_SALTO ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LO_QUE_SEA_SALTO ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LO_QUE_SEA_SALTO ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LO_QUE_SEA_SALTO ::= PUNTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LO_QUE_SEA_SALTO ::= PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LO_QUE_SEA_SALTO ::= PARENTESIS_A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LO_QUE_SEA_SALTO ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LO_QUE_SEA_SALTO ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LO_QUE_SEA_SALTO ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LO_QUE_SEA_SALTO ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LO_QUE_SEA_SALTO ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LO_QUE_SEA_SALTO ::= VARS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LO_QUE_SEA_SALTO ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LO_QUE_SEA_SALTO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LO_QUE_SEA_SALTO ::= LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LO_QUE_SEA_SALTO ::= LLAVES_A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LO_QUE_SEA_SALTO ::= COMILLAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LO_QUE_SEA_SALTO ::= COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LO_QUE_SEA_SALTO ::= DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LO_QUE_SEA_SALTO ::= CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LO_QUE_SEA_SALTO ::= CORCHETE_A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA_SALTO",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LO_QUE_SEA ::= PUNTO_PUNTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LO_QUE_SEA ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LO_QUE_SEA ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LO_QUE_SEA ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LO_QUE_SEA ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LO_QUE_SEA ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LO_QUE_SEA ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LO_QUE_SEA ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LO_QUE_SEA ::= PINTAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LO_QUE_SEA ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LO_QUE_SEA ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LO_QUE_SEA ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LO_QUE_SEA ::= WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LO_QUE_SEA ::= ELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LO_QUE_SEA ::= IF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LO_QUE_SEA ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LO_QUE_SEA ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LO_QUE_SEA ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LO_QUE_SEA ::= PUNTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LO_QUE_SEA ::= PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LO_QUE_SEA ::= PARENTESIS_A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LO_QUE_SEA ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LO_QUE_SEA ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LO_QUE_SEA ::= ASTERISCO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LO_QUE_SEA ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LO_QUE_SEA ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LO_QUE_SEA ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LO_QUE_SEA ::= VARS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LO_QUE_SEA ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LO_QUE_SEA ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LO_QUE_SEA ::= LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LO_QUE_SEA ::= LLAVES_A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LO_QUE_SEA ::= COMILLAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LO_QUE_SEA ::= COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LO_QUE_SEA ::= DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LO_QUE_SEA ::= CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LO_QUE_SEA ::= CORCHETE_A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO_QUE_SEA",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LOA ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LOA",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LOA ::= LO_QUE_SEA_SALTO LOA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LOA",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LO ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LO ::= LO_QUE_SEA LO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("LO",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CADENA_ASIG_BOOLEAN ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CADENA_ASIG_BOOLEAN",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CADENA_ASIG_BOOLEAN ::= COMA IDENTIFICADOR NT$20 CADENA_ASIG_BOOLEAN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CADENA_ASIG_BOOLEAN",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$20 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
nombre=(String) a; correcto = true;
                            if(tablaSimbolosVariables.buscarSimbolo(nombre)){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" ya existe");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" ya existe");
                            }
                            
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$20",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CADENA_ASIG_BOOLEAN ::= COMA IDENTIFICADOR NT$18 IGUAL OPERACION_BOOLEANA NT$19 CADENA_ASIG_BOOLEAN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CADENA_ASIG_BOOLEAN",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;

                            if(correcto && verificadorDatos.verificarTipoObjeto(b)==2){
                                
                                SimboloObject s = new SimboloObject(nombre, "Booleano", b);
                                System.out.println("agrego: "+entero);
                                tablaSimbolosVariables.agregarSimbolo(s);
                                
                            }
                            
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$19",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$18 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
nombre=(String) a; correcto = true;
                            if(tablaSimbolosVariables.buscarSimbolo(nombre)){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" ya existe");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" ya existe");
                            }
                            
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$18",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO_BOOL ::= FALSE 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPO_BOOL",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO_BOOL ::= TRUE 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPO_BOOL",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIG_VARS_BOOLEAN ::= NT$17 CADENA_ASIG_BOOLEAN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG_VARS_BOOLEAN",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$17 ::= 
            {
              Object RESULT =null;

                            SimboloObject s = new SimboloObject(nombre, "Booleano", false);
                            if(correcto){
                                //System.out.println("agrego: "+entero);
                                tablaSimbolosVariables.agregarSimbolo(s);
                            }
                            
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$17",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIG_VARS_BOOLEAN ::= IGUAL OPERACION_BOOLEANA NT$16 CADENA_ASIG_BOOLEAN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG_VARS_BOOLEAN",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;

                            
                            if(correcto && verificadorDatos.verificarTipoObjeto(a)==2){
                                
                                SimboloObject s = new SimboloObject(nombre, "Booleano", a);
                                System.out.println("agrego: "+entero);
                                tablaSimbolosVariables.agregarSimbolo(s);
                                
                            }
                        
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$16",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CADENA_ASIG_STRING ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CADENA_ASIG_STRING",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CADENA_ASIG_STRING ::= COMA IDENTIFICADOR NT$15 CADENA_ASIG_STRING 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CADENA_ASIG_STRING",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$15 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
nombre=(String) a; correcto = true;
                            if(tablaSimbolosVariables.buscarSimbolo(nombre)){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" ya existe");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" ya existe");
                            }
                            SimboloObject s = new SimboloObject(nombre, "String", "");
                            if(correcto){
                                System.out.println("agrego: "+entero);
                                tablaSimbolosVariables.agregarSimbolo(s);
                            }
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$15",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CADENA_ASIG_STRING ::= COMA IDENTIFICADOR NT$13 IGUAL CONCATENACION NT$14 CADENA_ASIG_STRING 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CADENA_ASIG_STRING",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
texto = (String)b;
                                SimboloObject s = new SimboloObject(nombre, "String", texto);
                                if(correcto){
                                    System.out.println("agrego: "+entero);
                                    tablaSimbolosVariables.agregarSimbolo(s);
                                }
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$14",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$13 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
nombre=(String) a; correcto = true;
                            if(tablaSimbolosVariables.buscarSimbolo(nombre)){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" ya existe");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" ya existe");
                            }
                            
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$13",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO_TEXTO ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPO_TEXTO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO_TEXTO ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPO_TEXTO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_TEXTO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPO_TEXTO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONCATENACION ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		
                            Object tex = tablaSimbolosVariables.getObjeto((String) a,"String");
                            if(tex!=null){
                                String lee = tex+"";
                                RESULT = lee;
                            }else{
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                                RESULT = "null";
                            }
                
                
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CONCATENACION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONCATENACION ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CONCATENACION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONCATENACION ::= COMILLAS TIPO_TEXTO COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CONCATENACION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONCATENACION ::= CONCATENACION MAS CONCATENACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		String concatenacion = a+""+b; RESULT = concatenacion; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CONCATENACION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIG_VARS_STRING ::= NT$12 CADENA_ASIG_STRING 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG_VARS_STRING",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$12 ::= 
            {
              Object RESULT =null;

                    SimboloObject s = new SimboloObject(nombre, "String", "");
                    if(correcto){
                        System.out.println("agrego: "+entero);
                        tablaSimbolosVariables.agregarSimbolo(s);
                    }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$12",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIG_VARS_STRING ::= IGUAL CONCATENACION NT$11 CADENA_ASIG_STRING 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG_VARS_STRING",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
texto = (String)a;
                    SimboloObject s = new SimboloObject(nombre, "String", texto);
                    if(correcto){
                        System.out.println("agrego: "+entero);
                        tablaSimbolosVariables.agregarSimbolo(s);
                    }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$11",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CADENA_ASIG_INT ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CADENA_ASIG_INT",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CADENA_ASIG_INT ::= COMA IDENTIFICADOR NT$10 CADENA_ASIG_INT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CADENA_ASIG_INT",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
nombre=(String) a; correcto = true;
                            if(tablaSimbolosVariables.buscarSimbolo(nombre)){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" ya existe");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" ya existe");
                            }
                            SimboloObject s = new SimboloObject(nombre, "Int", 0);
                            if(correcto){
                                tablaSimbolosVariables.agregarSimbolo(s);
                            }
                            
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$10",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CADENA_ASIG_INT ::= COMA IDENTIFICADOR NT$8 IGUAL OPERACION NT$9 CADENA_ASIG_INT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("CADENA_ASIG_INT",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
entero=Integer.parseInt((String)b);
                                SimboloObject s = new SimboloObject(nombre, "Int", entero);
                                if(correcto){
                                    System.out.println("agrego: "+entero);
                                    tablaSimbolosVariables.agregarSimbolo(s);
                                }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$9",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
nombre=(String) a; correcto = true;
                            if(tablaSimbolosVariables.buscarSimbolo(nombre)){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" ya existe");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" ya existe");
                            }
                            
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$8",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPOS_INT ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPOS_INT",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPOS_INT ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("TIPOS_INT",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		
                            Object num = tablaSimbolosVariables.getObjeto((String) a,"Int");
                            if(num!=null){
                                String lee = ""+num;
                                RESULT = lee;
                            }else{
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" no existe o no tiene valor");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" no existe o no tiene valor");
                                RESULT = 0;
                            }
                
                
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERACION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 RESULT = (String)a; 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERACION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= OPERACION DIAGONAL OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 int val1 = Integer.parseInt((String)a);
                        int val2 = Integer.parseInt((String)b);
                        int r = val1 / val2;
                        System.out.println("valor: "+r);
                        RESULT = String.valueOf(r);
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERACION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= OPERACION ASTERISCO OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 int val1 = Integer.parseInt((String)a);
                        int val2 = Integer.parseInt((String)b);
                        int r = val1 * val2;
                        System.out.println("valor: "+r);
                        RESULT = String.valueOf(r);
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERACION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACION ::= OPERACION MENOS OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 int val1 = Integer.parseInt((String)a);
                        int val2 = Integer.parseInt((String)b);
                        int r = val1 - val2;
                        System.out.println("valor: "+r);
                        RESULT = String.valueOf(r);
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERACION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= OPERACION MAS OPERACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		 int val1 = Integer.parseInt((String)a);
                        int val2 = Integer.parseInt((String)b);
                        int r = val1 + val2;
                        System.out.println("valor: "+r);
                        RESULT = String.valueOf(r);
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("OPERACION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIG_VARS_INT ::= NT$7 CADENA_ASIG_INT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG_VARS_INT",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$7 ::= 
            {
              Object RESULT =null;
 SimboloObject s = new SimboloObject(nombre, "Int", 0);
                    if(correcto){
                        tablaSimbolosVariables.agregarSimbolo(s);
                    }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$7",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIG_VARS_INT ::= IGUAL OPERACION NT$6 CADENA_ASIG_INT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ASIG_VARS_INT",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
entero=Integer.parseInt((String)a);
                    SimboloObject s = new SimboloObject(nombre, "Int", entero);
                    if(correcto){
                        System.out.println("agrego: "+entero);
                        tablaSimbolosVariables.agregarSimbolo(s);
                    }
                    
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$6",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_VARIABLES ::= BOOLEAN IDENTIFICADOR NT$5 ASIG_VARS_BOOLEAN PUNTO_COMA FINALIZAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
nombre=(String) a; correcto = true;
                            if(tablaSimbolosVariables.buscarSimbolo(nombre)){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" ya existe");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" ya existe");
                            }
                            
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_VARIABLES ::= STRING IDENTIFICADOR NT$4 ASIG_VARS_STRING PUNTO_COMA FINALIZAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
nombre=(String) a; correcto = true;
                            if(tablaSimbolosVariables.buscarSimbolo(nombre)){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" ya existe");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" ya existe");
                            }
                            
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_VARIABLES ::= INT IDENTIFICADOR NT$3 ASIG_VARS_INT PUNTO_COMA FINALIZAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
nombre=(String) a; correcto = true;
                            if(tablaSimbolosVariables.buscarSimbolo(nombre)){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" ya existe");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" ya existe");
                            }
                            
                            
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTRUCTURA_VARS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_VARS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTRUCTURA_VARS ::= COMENTARIO NT$2 ESTRUCTURA_VARS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_VARS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.println("salio COMENTARIO"); 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESTRUCTURA_VARS ::= DECLARACION_VARIABLES ESTRUCTURA_VARS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_VARS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FINALIZAR ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("FINALIZAR",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FINALIZAR ::= SALTO FINALIZAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("FINALIZAR",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMENTARIO ::= DIAGONAL DIAGONAL LO SALTO 
            {
              Object RESULT =null;
		 System.out.println("salio linea"); 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("COMENTARIO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMENTARIO ::= DIAGONAL ASTERISCO LOA ASTERISCO DIAGONAL FINALIZAR 
            {
              Object RESULT =null;
		 System.out.println("salio "); 
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("COMENTARIO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S0 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("S0",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S0 ::= SALTO S0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("S0",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S0 ::= INICIO_INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("S0",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO_INSTRUCCIONES ::= INSTRUCCIONES PARENTESIS_A IDENTIFICADOR NT$0 PARENTESIS_C NT$1 CORCHETE_A FINALIZAR ESTRUCTURA_INSTRUCCIONES CORCHETE_C S0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-8)).value;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("INICIO_INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)).value;
lienzoInstruccion = (String)a;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;

                        if(!parser.tablaSimbolos.buscarSimbolo((String)a)){
                                correcto = false;
                                ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" NO existe");
                                parser.listaErrores.add(e);
                                System.out.println("Semantico: El simbolo "+(String) a+" NO existe");
                            }else{correcto = true; System.out.println("El simbolo "+(String) a+" si existe");}
                        
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO_VARS ::= VARS CORCHETE_A FINALIZAR ESTRUCTURA_VARS CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("INICIO_VARS",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.peek()).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error INICIO_INSTRUCCIONES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error ESTRUC_PINTAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error ASIGNACION_VALORES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error DECLARACION_VARIABLES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO_VARS FINALIZAR INICIO_INSTRUCCIONES 
            {
              Object RESULT =null;
		parser.setTablaVariables(tablaSimbolosVariables); parser.setTablaPintar(tablaSimbolosPintar);
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPnt$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoPnt$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.elementAt(CUP$AnalizadorSintacticoPnt$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPnt$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoPnt$parser.done_parsing();
          return CUP$AnalizadorSintacticoPnt$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

