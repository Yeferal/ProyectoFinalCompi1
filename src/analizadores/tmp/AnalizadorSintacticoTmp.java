
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 23 14:01:05 CST 2020
//----------------------------------------------------

package analizadores.tmp;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import objetos.*;
import tablas.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 23 14:01:05 CST 2020
  */
public class AnalizadorSintacticoTmp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTmp() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTmp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTmp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\014\002\000\002\003\010\000" +
    "\002\015\002\000\002\016\002\000\002\004\012\000\002" +
    "\005\004\000\002\005\002\000\002\006\007\000\002\017" +
    "\002\000\002\007\010\000\002\020\002\000\002\007\010" +
    "\000\002\007\007\000\002\013\004\000\002\013\004\000" +
    "\002\013\002\000\002\021\002\000\002\010\007\000\002" +
    "\011\004\000\002\011\002\000\002\012\013\000\002\012" +
    "\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\006\003\005\011\004\001\002\000\004\013" +
    "\106\001\002\000\022\002\ufffb\011\010\015\022\027\021" +
    "\030\017\031\015\032\014\033\012\001\002\000\004\002" +
    "\007\001\002\000\004\002\000\001\002\000\006\027\021" +
    "\030\017\001\002\000\004\002\ufffe\001\002\000\004\006" +
    "\072\001\002\000\004\002\uffff\001\002\000\004\006\065" +
    "\001\002\000\004\006\061\001\002\000\004\002\ufffd\001" +
    "\002\000\004\006\051\001\002\000\004\002\ufffc\001\002" +
    "\000\004\006\041\001\002\000\004\006\ufff8\001\002\000" +
    "\004\006\024\001\002\000\004\011\025\001\002\000\010" +
    "\031\015\032\014\033\012\001\002\000\004\012\034\001" +
    "\002\000\004\007\030\001\002\000\010\031\015\032\014" +
    "\033\012\001\002\000\004\007\032\001\002\000\010\031" +
    "\015\032\014\033\012\001\002\000\004\012\ufff3\001\002" +
    "\000\010\002\ufff7\007\ufff7\012\ufff7\001\002\000\010\002" +
    "\ufff4\007\036\012\ufff4\001\002\000\004\015\022\001\002" +
    "\000\006\002\ufff6\012\ufff6\001\002\000\006\002\ufff5\012" +
    "\ufff5\001\002\000\004\016\042\001\002\000\004\007\043" +
    "\001\002\000\004\030\044\001\002\000\004\006\045\001" +
    "\002\000\004\010\046\001\002\000\004\015\047\001\002" +
    "\000\004\010\050\001\002\000\006\002\uffe5\012\uffe5\001" +
    "\002\000\004\010\052\001\002\000\004\015\053\001\002" +
    "\000\004\010\054\001\002\000\004\007\055\001\002\000" +
    "\004\027\056\001\002\000\004\006\057\001\002\000\004" +
    "\016\060\001\002\000\006\002\uffe6\012\uffe6\001\002\000" +
    "\004\004\062\001\002\000\004\011\010\001\002\000\004" +
    "\005\064\001\002\000\010\002\uffee\007\uffee\012\uffee\001" +
    "\002\000\004\010\066\001\002\000\004\015\067\001\002" +
    "\000\004\010\ufff0\001\002\000\004\010\071\001\002\000" +
    "\010\002\uffef\007\uffef\012\uffef\001\002\000\004\010\073" +
    "\001\002\000\004\015\074\001\002\000\004\010\ufff2\001" +
    "\002\000\004\010\076\001\002\000\010\002\ufff1\007\ufff1" +
    "\012\ufff1\001\002\000\004\012\100\001\002\000\010\002" +
    "\uffea\005\uffea\007\uffea\001\002\000\010\002\uffe7\005\uffe7" +
    "\007\102\001\002\000\004\011\010\001\002\000\006\002" +
    "\uffe9\005\uffe9\001\002\000\006\002\uffe8\005\uffe8\001\002" +
    "\000\004\012\114\001\002\000\004\006\ufffa\001\002\000" +
    "\004\006\110\001\002\000\004\011\111\001\002\000\004" +
    "\015\022\001\002\000\004\012\113\001\002\000\004\012" +
    "\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\002\005\001\001\000\004\003\104\001" +
    "\001\000\012\004\012\007\010\010\017\012\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\025\007\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\030\001\001\000\002\001\001\000" +
    "\004\007\032\001\001\000\002\001\001\000\004\016\034" +
    "\001\001\000\004\005\036\001\001\000\004\004\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\100" +
    "\001\001\000\004\011\102\001\001\000\004\010\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTmp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTmp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTmp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    TablaSimbolos tablaSimbolos;
    TablaSimbolos tablaSimbolosTiempos;
    public ArrayList<ErrorG> listaErrores = new  ArrayList<>();
    
    public void setTablaTiempos(TablaSimbolos tablaSimbolosTiempos){
        this.tablaSimbolosTiempos = tablaSimbolosTiempos; 
    }

    public TablaSimbolos getTablaTiempos(){
        return tablaSimbolosTiempos; 
    }
    public void setTabla(TablaSimbolos tablaSimbolos){
        this.tablaSimbolos = tablaSimbolos; 
    }

    public TablaSimbolos getTabla(){
        return tablaSimbolos; 
    }



    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            if(s!=null){
                ErrorG e = new ErrorG(s.right,s.left,(String) s.value,"Sintactico","Error Sintaxis token: "+(String) s.value+" ------ Linea: " + (s.right+1) + ",   Columna: " + (s.left+1));
                listaErrores.add(e);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTmp$actions {


    TablaSimbolos tablaSimbolos = new TablaSimbolos();
    TablaSimbolos tablaTiempos = new TablaSimbolos();
    TablaSimbolos tablaImagenes = new TablaSimbolos();
    Lienzo lienzo;
    Tiempo tiempo;
    Imagen imagen;
    String nombreLienzo;
    String inicio;
    String fin;
    boolean correcto;
    boolean existeLienzo;
    

  private final AnalizadorSintacticoTmp parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTmp$actions(AnalizadorSintacticoTmp parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTmp$do_action(
    int                        CUP$AnalizadorSintacticoTmp$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTmp$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTmp$stack,
    int                        CUP$AnalizadorSintacticoTmp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTmp$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTmp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATRIB_IMAGENES ::= DURACION DOS_PUNTOS NUMERO COMA ID DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		imagen = new Imagen((String) a,Integer.parseInt((String) b));
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("ATRIB_IMAGENES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIB_IMAGENES ::= ID DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA DURACION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.peek()).value;
		imagen = new Imagen((String) a,Integer.parseInt((String) b));
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("ATRIB_IMAGENES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // S1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("S1",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // S1 ::= COMA ESTRUCTURA_IMAGENES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("S1",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ESTRUCTURA_IMAGENES ::= LLAVES_A ATRIB_IMAGENES LLAVES_C NT$5 S1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-3)).value;

              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IMAGENES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;

                    if(existeLienzo){
                        SimboloObject simbolo = new SimboloObject(imagen.getId(), nombreLienzo, imagen);
                        tablaImagenes.agregarSimbolo(simbolo);
                    }else{
                        ErrorG e = new ErrorG(aright+1,aleft+1,imagen.getId(),"Semantico","El simbolo "+imagen.getId()+" Tipo imagen");
                        parser.listaErrores.add(e);
                        System.out.println("Semantico: El simbolo "+imagen.getId()+" Tipo Imagen");
                    }
                    
                    
                    
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("NT$5",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDENTIFICADORES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDENTIFICADORES ::= NUMERO IDENTIFICADORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.peek()).value;
		  String t = " ";
                        if(b!=null){
                            t = (String)a+" "+(String)b;
                        }else{
                            t = (String)a;
                        } 
                        System.out.println("entro a intificadores id: "+(String)t); 
                        RESULT = (String)t; 
                        
                    
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IDENTIFICADORES ::= IDENTIFICADOR IDENTIFICADORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.peek()).value;
		  String t = " ";
                        if(b!=null){
                            t = (String)a+" "+(String)b;
                        }else{
                            t = (String)a;
                        } 
                        System.out.println("entro a intificadores id: "+(String)t); 
                        RESULT = (String)t; 
                        
                    
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUTOS ::= IMAGENES DOS_PUNTOS CORCHETE_A ESTRUCTURA_IMAGENES CORCHETE_C 
            {
              Object RESULT =null;
		RESULT = 3;
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIBUTOS ::= FIN DOS_PUNTOS COMILLAS IDENTIFICADOR NT$4 COMILLAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-2)).value;
		RESULT = 2;
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.peek()).value;
 fin = (String) a; 
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("NT$4",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ATRIBUTOS ::= INICIO_RSRVD DOS_PUNTOS COMILLAS IDENTIFICADOR NT$3 COMILLAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-2)).value;
		RESULT = 1;
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.peek()).value;
 inicio = (String) a; 
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("NT$3",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETROS ::= ATRIBUTOS COMA ATRIBUTOS COMA ATRIBUTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.peek()).value;
		
                        int a1 = (int) a;
                        int a2 = (int) b;
                        int a3 = (int) c;
                        if(a1==a2 || a1==a3 || a2==a3){
                            correcto = false;
                            ErrorG e = null;
                            //error dato duplicado
                            System.out.println("se duplico algun atributo");
                            if(a1==a2){
                                e = new ErrorG(bright+1,bleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(bright+1)+",   Columna: "+(bleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(bright+1)+",   Columna: "+(bleft+1));
                            }
                            if(a1==a3){
                                e = new ErrorG(cright+1,cleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                            }

                            if(a2==a3){
                                e = new ErrorG(cright+1,cleft+1,(String) a,"Sintactico","Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                                System.out.println("Error Sintaxis token: "+(String) a+" ------ Linea: "+(cright+1)+",   Columna: "+(cleft+1));
                            }
                            
                            parser.listaErrores.add(e);
                        }
                    
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("PARAMETROS",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S0 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("S0",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S0 ::= COMA ESTRUCTURA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("S0",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA_PARAMETROS ::= IDENTIFICADOR NT$1 DOS_PUNTOS LLAVES_A PARAMETROS LLAVES_C NT$2 S0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-7)).value;

              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-5)).value;

                        //verificar si existe inicio y final
                        correcto = true;
                        if(!tablaImagenes.buscarSimboloTipo(inicio,nombreLienzo)){
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo inicio: "+inicio+" no existe imagen");
                            parser.listaErrores.add(e);
                            correcto = false;
                            System.out.println("Semantico: El simbolo inicio: "+inicio+" su no existe imagen");
                        }
                        if(!tablaImagenes.buscarSimboloTipo(fin,nombreLienzo)){
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo fin: "+fin+" su no existe imagen");
                            parser.listaErrores.add(e);
                            correcto = false;
                            System.out.println("Semantico: El simbolo fin: "+fin+" su no existe imagen");
                        }
                        if(existeLienzo && correcto){   
                            Lienzo l = tablaSimbolos.getLienzo(nombreLienzo);
                            l.setInicio(inicio);
                            l.setFin(fin);
                            tablaSimbolos.modificar(nombreLienzo,"Lienzo",l);
                        }
                        
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("NT$2",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.peek()).value;

                        nombreLienzo = (String) a;
                        if(tablaSimbolos.buscarSimboloTipo((String) a,"Lienzo")){
                            existeLienzo = true;
                        }else{
                            existeLienzo = false;
                            ErrorG e = new ErrorG(aright+1,aleft+1,(String) a,"Semantico","El simbolo "+(String) a+" Tipo Lienzo NO EXISTE");
                            parser.listaErrores.add(e);
                            System.out.println("Semantico: El simbolo "+(String) a+" Tipo Lienzo NO EXISTE");
                        }
                        
                        
                        
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("NT$1",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA_TIEMPOS ::= TIEMPOS NT$0 DOS_PUNTOS LLAVES_A ESTRUCTURA_PARAMETROS LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-4)).value;
		parser.setTablaTiempos(tablaImagenes);
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_TIEMPOS",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
tablaSimbolos = parser.getTabla();
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("NT$0",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.peek()).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error ESTRUCTURA_IMAGENES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error ATRIB_IMAGENES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error ATRIBUTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error ESTRUCTURA_PARAMETROS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTmp$parser.done_parsing();
          return CUP$AnalizadorSintacticoTmp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= LLAVES_A ESTRUCTURA_TIEMPOS LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTmp$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.elementAt(CUP$AnalizadorSintacticoTmp$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTmp$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTmp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

